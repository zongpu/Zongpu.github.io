<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zongpu&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-06T12:45:28.263Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>ZongPu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>面试题9：用两个栈实现队列</title>
    <link href="http://yoursite.com/2020/01/09/%E9%9D%A2%E8%AF%95%E9%A2%989%EF%BC%9A%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/"/>
    <id>http://yoursite.com/2020/01/09/%E9%9D%A2%E8%AF%95%E9%A2%989%EF%BC%9A%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/</id>
    <published>2020-01-09T13:51:38.418Z</published>
    <updated>2019-08-06T12:45:28.263Z</updated>
    
    <content type="html"><![CDATA[<p>题目：<br><a href="https://www.nowcoder.com/ta/coding-interviews" target="_blank" rel="noopener">https://www.nowcoder.com/ta/coding-interviews</a></p><p>用两个栈来实现一个队列；<br>完成队列的Push和Pop操作；</p><p>思考：</p><p>栈是有序的 LIFO，也就是后进先出（先进后出）;<br>队列是有序的FIFO，也就是先进先出。</p><p>也就是要用两个先进后出的栈，实现先进先出的队列。</p><p>例如：stack1={a}; stack2={};</p><p>压入b,c:stack1={c,b,a}(a在栈底，c在栈顶);stack2={};</p><p>当我们想要弹出a时，由于a在stack1底，不能直接弹出，于是我们先将stack1的元素按照栈先入后出的原则弹出并压入stack2有：stack2={a,b,c}(此时，a在栈顶，c在栈底)；</p><p>于是，可以顺利从stack2中弹出a，总体上实现队列先入先出的性质。</p><p>总结：</p><p>push()方法可以利用list.append()方法实现；</p><p>pop()方法：判断stack2是否为空，不空，依次弹出栈顶元素；为空，则先将stack1中元素按照先入后出的原则弹出并压入stack2，然后弹出stack2中栈顶元素；总体实现队列功能。</p><p>python中可用列表表示后入先出的栈，list.pop()默认删除列表最后一个元素（此外，pop()有可选参数，如：list1.pop(1)，1为待删除元素的索引，pop方法返回删除的列表元素）；</p><p>push()方法，可看作用list.append()往列表尾追加新元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="string">'Google'</span>, <span class="string">'Runoob'</span>, <span class="string">'Taobao'</span>]</span><br><span class="line">list_pop=list1.pop()</span><br><span class="line">print( <span class="string">"删除的项为 :"</span>, list_pop)</span><br><span class="line">print( <span class="string">"列表现在为 : "</span>, list1)</span><br></pre></td></tr></table></figure><pre><code>删除的项为 : Taobao列表现在为 :  [&apos;Google&apos;, &apos;Runoob&apos;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list2 = [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>]</span><br><span class="line">list_push=list2.append(<span class="string">'new_4'</span>)</span><br><span class="line">print( <span class="string">"列表现在为 : "</span>, list2)</span><br></pre></td></tr></table></figure><pre><code>列表现在为 :  [&apos;1&apos;, &apos;2&apos;, &apos;3&apos;, &apos;new_4&apos;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.stack1=[]</span><br><span class="line">        self.stack2=[<span class="string">'x'</span>,<span class="string">'y'</span>]<span class="comment">#顺序，先x，再y，说明在之前有：stack1=&#123;'y','x'&#125;,y比x先入栈</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#     def push(self, node):</span></span><br><span class="line"><span class="comment">#         self.stack1.append(node)#直接在stack1中压入元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#这是一个参考博主的写法，增加了对stack1是否为空的判断及操作</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.stack1:<span class="comment">#如果stack1非空，在其中压入元素</span></span><br><span class="line">            self.stack1.append(node)</span><br><span class="line">        <span class="keyword">else</span>:<span class="comment">#若stack1空</span></span><br><span class="line">            <span class="keyword">while</span> self.stack2:<span class="comment">#在stack2非空时（此时，说明其中数据先进入队列）</span></span><br><span class="line">                self.stack1.append(self.stack2.pop())<span class="comment">#先将stack2中元素弹出并压入到stack1，形成新的待追加新元素的栈，</span></span><br><span class="line"><span class="comment">#我猜这样是为了方便后面的pop处理，因为这样不用判断stack2是否为空（经过形成新的stack1的处理，stack2始终为空），直接将stack1元素弹出压入stack2，再进行pop就好</span></span><br><span class="line">            self.stack1.append(node)<span class="comment">#然后压入新的元素，此步不可少，不然会造成新压入的第一个元素缺失</span></span><br><span class="line">            </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.stack2:</span><br><span class="line">            <span class="keyword">return</span> self.stack2.pop()</span><br><span class="line">        <span class="keyword">elif</span> self.stack1:</span><br><span class="line">            <span class="keyword">while</span> self.stack1:</span><br><span class="line">                self.stack2.append(self.stack1.pop())</span><br><span class="line">            <span class="keyword">return</span> self.stack2.pop()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">method = Solution()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">6</span>):</span><br><span class="line">    push = method.push(i)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"stack1="</span>,method.stack1)</span><br><span class="line">print(<span class="string">"stack2="</span>,method.stack2)</span><br></pre></td></tr></table></figure><pre><code>stack1= [&apos;y&apos;, &apos;x&apos;, 1, 2, 3, 4, 5]stack2= []</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pop = method.pop()</span><br><span class="line">print(<span class="string">"stack1="</span>,method.stack1)</span><br><span class="line">print(<span class="string">"弹出的元素为"</span>,pop)</span><br><span class="line">print(<span class="string">"stack2="</span>,method.stack2)</span><br></pre></td></tr></table></figure><pre><code>stack1= []弹出的元素为 ystack2= [5, 4, 3, 2, 1, &apos;x&apos;]</code></pre><p>由于在push方法中增加了对stack2的处理，原pop方法可以简化，因为处理后的stack2始终为空</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution1</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.stack1=[]</span><br><span class="line">        self.stack2=[<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.stack2:</span><br><span class="line">            <span class="keyword">while</span> self.stack2:</span><br><span class="line">                self.stack1.append(self.stack2.pop())</span><br><span class="line">        self.stack1.append(node)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.stack1:<span class="comment">#如果stack1不空</span></span><br><span class="line">            <span class="keyword">while</span> self.stack1:</span><br><span class="line">                self.stack2.append(self.stack1.pop())<span class="comment">#直接将stack1中元素弹出，再压入stack2，形成待弹出栈</span></span><br><span class="line">        <span class="keyword">return</span> self.stack2.pop()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">method = Solution1()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">6</span>):</span><br><span class="line">    push = method.push(i)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"stack1="</span>,method.stack1)</span><br><span class="line">print(<span class="string">"stack2="</span>,method.stack2)</span><br></pre></td></tr></table></figure><pre><code>stack1= [7, 6, 1, 2, 3, 4, 5]stack2= []</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pop = method.pop()</span><br><span class="line">print(<span class="string">"stack1="</span>,method.stack1)</span><br><span class="line">print(<span class="string">"弹出的元素为"</span>,pop)</span><br><span class="line">print(<span class="string">"stack2="</span>,method.stack2)</span><br></pre></td></tr></table></figure><pre><code>stack1= []弹出的元素为 7stack2= [5, 4, 3, 2, 1, 6]</code></pre><p>reference：</p><p>1.<a href="https://blog.csdn.net/Datawhale/article/details/82118919" target="_blank" rel="noopener">https://blog.csdn.net/Datawhale/article/details/82118919</a></p><p>2.<a href="https://blog.csdn.net/fuxuemingzhu/article/details/79499461" target="_blank" rel="noopener">https://blog.csdn.net/fuxuemingzhu/article/details/79499461</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目：&lt;br&gt;&lt;a href=&quot;https://www.nowcoder.com/ta/coding-interviews&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.nowcoder.com/ta/coding-intervie
      
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="剑指offer" scheme="http://yoursite.com/tags/%E5%89%91%E6%8C%87offer/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>面试题6：从头到尾打印链表</title>
    <link href="http://yoursite.com/2020/01/09/%E9%9D%A2%E8%AF%95%E9%A2%986%EF%BC%9A%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/"/>
    <id>http://yoursite.com/2020/01/09/%E9%9D%A2%E8%AF%95%E9%A2%986%EF%BC%9A%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/</id>
    <published>2020-01-09T13:51:38.403Z</published>
    <updated>2019-08-06T12:44:28.400Z</updated>
    
    <content type="html"><![CDATA[<p>题目：<br><a href="https://www.nowcoder.com/ta/coding-interviews" target="_blank" rel="noopener">https://www.nowcoder.com/ta/coding-interviews</a></p><p>输入一个链表：</p><p>按链表值从尾到头的顺序返回一个ArrayList。</p><p>定义链表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x, next=None)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = next</span><br></pre></td></tr></table></figure><p>思考：</p><p>读取链表中的元素，放入列表，倒序输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printListFromTailToHead</span><span class="params">(self, listNode)</span>:</span></span><br><span class="line">        list=[]</span><br><span class="line">        <span class="keyword">while</span> listNode:</span><br><span class="line">            list.append(listNode.val)</span><br><span class="line">            listNode = listNode.next</span><br><span class="line"><span class="comment">#         return list[::1]#顺序列表</span></span><br><span class="line">        <span class="keyword">return</span> list[::<span class="number">-1</span>]<span class="comment">#逆序列表</span></span><br></pre></td></tr></table></figure><p>疑问:链表的顺序感觉上跟直觉相反?在这里,用循环创建链表结构,最先创建的是末节点.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据节点定义,用循环创建一个链表结构:</span></span><br><span class="line"><span class="comment"># 5,4,3,2,1</span></span><br><span class="line"></span><br><span class="line">head = <span class="literal">None</span><span class="comment">#最后一个指向None</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">6</span>):</span><br><span class="line">    head = ListNode(i,head)</span><br><span class="line">    print(<span class="string">"这是生成的链表数据"</span>,head.val)</span><br></pre></td></tr></table></figure><pre><code>这是生成的链表数据 1这是生成的链表数据 2这是生成的链表数据 3这是生成的链表数据 4这是生成的链表数据 5</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">method = Solution()</span><br><span class="line">answer = method.printListFromTailToHead(head)</span><br><span class="line">answer</span><br></pre></td></tr></table></figure><pre><code>[1, 2, 3, 4, 5]</code></pre><p>python列表切片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line">s = <span class="string">'abcdefg'</span></span><br><span class="line"><span class="comment"># 返回从起始位置到索引位置 2 处的字符串切片</span></span><br><span class="line">print(s[:<span class="number">3</span>]) <span class="comment"># 输出 'abc'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回从第三个索引位置到结尾的字符串切片</span></span><br><span class="line">print(s[<span class="number">3</span>:]) <span class="comment"># 输出 'defg'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串逆序输出</span></span><br><span class="line">print(s[::<span class="number">-1</span>]) <span class="comment"># 输出 'gfedcba'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出从开始位置间隔一个字符组成的字符串</span></span><br><span class="line">print(s[::<span class="number">2</span>]) <span class="comment"># 输出 'aceg'</span></span><br><span class="line">print(range(<span class="number">10</span>)[::<span class="number">2</span>])  <span class="comment"># 会直接输出range(0, 10, 2)</span></span><br><span class="line">print(list(range(<span class="number">10</span>)[::<span class="number">2</span>])) <span class="comment">#这样才能输出偶数：[0, 2, 4, 6, 8]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 它们也可以相互结合使用。</span></span><br><span class="line"><span class="comment"># 从索引位置 6 到索引位置 2，逆向间隔一个字符</span></span><br><span class="line">print(s[<span class="number">6</span>:<span class="number">2</span>:<span class="number">-2</span>]) <span class="comment"># 输出'ge'</span></span><br></pre></td></tr></table></figure><pre><code>abcdefggfedcbaacegrange(0, 10, 2)ge</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(range(<span class="number">10</span>)[::<span class="number">2</span>])</span><br></pre></td></tr></table></figure><pre><code>range(0, 10, 2)</code></pre><p>reference：</p><p>1.<a href="https://blog.csdn.net/Datawhale/article/details/81947290" target="_blank" rel="noopener">https://blog.csdn.net/Datawhale/article/details/81947290</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目：&lt;br&gt;&lt;a href=&quot;https://www.nowcoder.com/ta/coding-interviews&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.nowcoder.com/ta/coding-intervie
      
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="剑指offer" scheme="http://yoursite.com/tags/%E5%89%91%E6%8C%87offer/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>面试题7：重建二叉树</title>
    <link href="http://yoursite.com/2020/01/09/%E9%9D%A2%E8%AF%95%E9%A2%987%EF%BC%9A%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>http://yoursite.com/2020/01/09/%E9%9D%A2%E8%AF%95%E9%A2%987%EF%BC%9A%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/</id>
    <published>2020-01-09T13:51:38.403Z</published>
    <updated>2019-08-06T12:44:51.304Z</updated>
    
    <content type="html"><![CDATA[<p>题目： <a href="https://www.nowcoder.com/ta/coding-interviews" target="_blank" rel="noopener">https://www.nowcoder.com/ta/coding-interviews</a></p><p>输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。</p><p>思考：</p><p>前序遍历的第一个值是二叉树的根节点，中旬遍历中根节点（<strong>索引为i</strong>）前边的都是左子树的值（对应前序遍历[1:i+1]中的元素），后边的是右子树的值（对应前序遍历[i+1:]中的元素）；</p><p>递归重复以上过程：取前序遍历[1:i+1]和中序遍历[:i]中的值重复上一个过程得到左子树,取前序遍历[i+1:]和中序遍历[i+1：]得到右子树</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义树节点</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">PrintFromTopToBottom</span><span class="params">(root)</span>:</span><span class="comment">#打印二叉树（从上往下，同层节点从左至右打印）</span></span><br><span class="line">    array = []</span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    array.append(root)</span><br><span class="line">    <span class="keyword">while</span> array:</span><br><span class="line">        newNode = array.pop(<span class="number">0</span>)</span><br><span class="line">        result.append(newNode.val)</span><br><span class="line">        <span class="keyword">if</span> newNode.left != <span class="literal">None</span>:</span><br><span class="line">            array.append(newNode.left)</span><br><span class="line">        <span class="keyword">if</span> newNode.right != <span class="literal">None</span>:</span><br><span class="line">            array.append(newNode.right)</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>方法1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reConstructBinaryTree</span><span class="params">(self, preorder,inorder)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> len(preorder) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> len(preorder) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> TreeNode(preorder[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            index = inorder.index(preorder[<span class="number">0</span>])<span class="comment">#得到根节点在中序遍历中的索引</span></span><br><span class="line">            node = TreeNode(preorder[<span class="number">0</span>])<span class="comment">#根节点</span></span><br><span class="line">            </span><br><span class="line">            preorderLeft = preorder[<span class="number">1</span>:index+<span class="number">1</span>]<span class="comment">#左子树的元素</span></span><br><span class="line">            inorderLeft = inorder[:index]</span><br><span class="line">            preorderRight = preorder[index+<span class="number">1</span>:]<span class="comment">#右子树的元素</span></span><br><span class="line">            inorderRight = inorder[index+<span class="number">1</span>:]</span><br><span class="line">            </span><br><span class="line">            node.left = self.reConstructBinaryTree(preorderLeft,inorderLeft)<span class="comment">#递归调用重建方法self.XX()</span></span><br><span class="line">            node.right = self.reConstructBinaryTree(preorderRight,inorderRight)</span><br><span class="line">        <span class="keyword">return</span> node</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">solution = Solution()</span><br><span class="line">preorder_seq = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br><span class="line">middleorder_seq = [<span class="number">4</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">6</span>]</span><br><span class="line"><span class="comment"># print(middleorder_seq[-4:])</span></span><br><span class="line">treeRoot1 = solution.reConstructBinaryTree(preorder_seq, middleorder_seq)</span><br><span class="line">newArray = PrintFromTopToBottom(treeRoot1)</span><br><span class="line">print(newArray)</span><br></pre></td></tr></table></figure><pre><code>[5, 3, 8, 6][1, 2, 3, 4, 5, 6, 7, 8]</code></pre><p>方法2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">construct_tree</span><span class="params">(self, preorder=None, inorder=None)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        构建二叉树</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> preorder <span class="keyword">or</span> <span class="keyword">not</span> inorder:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        index = inorder.index(preorder[<span class="number">0</span>])</span><br><span class="line">        left = inorder[<span class="number">0</span>:index]</span><br><span class="line">        right = inorder[index+<span class="number">1</span>:]</span><br><span class="line">        root = TreeNode(preorder[<span class="number">0</span>])</span><br><span class="line">        root.left = construct_tree(preorder[<span class="number">1</span>:<span class="number">1</span>+len(left)], left)<span class="comment">#这里其实有len(left)=index</span></span><br><span class="line">        root.right = construct_tree(preorder[-len(right):], right)</span><br><span class="line">        <span class="comment">#preorder[-3:]表示从-3到末尾处，包含-3这个索引（倒数第三）位置的元素</span></span><br><span class="line">        <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure><pre><code>[1, 2, 3, 4, 5, 6, 7, 8]</code></pre><p>参考：</p><p><a href="https://blog.csdn.net/Datawhale/article/details/81948283" target="_blank" rel="noopener">https://blog.csdn.net/Datawhale/article/details/81948283</a></p><p><a href="https://blog.csdn.net/fuxuemingzhu/article/details/70303139" target="_blank" rel="noopener">https://blog.csdn.net/fuxuemingzhu/article/details/70303139</a></p><p><a href="https://blog.csdn.net/u010005281/article/details/79493413" target="_blank" rel="noopener">https://blog.csdn.net/u010005281/article/details/79493413</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目： &lt;a href=&quot;https://www.nowcoder.com/ta/coding-interviews&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.nowcoder.com/ta/coding-interviews&lt;
      
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="剑指offer" scheme="http://yoursite.com/tags/%E5%89%91%E6%8C%87offer/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>面试题32：分行从上到下打印二叉树</title>
    <link href="http://yoursite.com/2020/01/09/%E9%9D%A2%E8%AF%95%E9%A2%9832%EF%BC%9A%E5%88%86%E8%A1%8C%E4%BB%8E%E4%B8%8A%E5%88%B0%E4%B8%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>http://yoursite.com/2020/01/09/%E9%9D%A2%E8%AF%95%E9%A2%9832%EF%BC%9A%E5%88%86%E8%A1%8C%E4%BB%8E%E4%B8%8A%E5%88%B0%E4%B8%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91/</id>
    <published>2020-01-09T13:51:38.387Z</published>
    <updated>2019-09-01T14:07:29.850Z</updated>
    
    <content type="html"><![CDATA[<p>题目：<a href="https://www.nowcoder.com/ta/coding-interviews?query=&amp;asc=true&amp;order=&amp;page=3" target="_blank" rel="noopener">https://www.nowcoder.com/ta/coding-interviews?query=&amp;asc=true&amp;order=&amp;page=3</a></p><p>从上到下按层打印二叉树，与之前不同的是：同一层节点从左至右顺序打印（输出），每一层打印（输出）一行。</p><p>理解：</p><p>这里，根据要求返回二维列表，容易知道，为了把二叉树的每一行单独打印到一行，用列表存储每一层的节点值：[ [ ], [ ], [ ], …, [ ] ],第几层对应第几个子序列。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution1</span>:</span></span><br><span class="line"><span class="comment"># 返回二维列表[[1,2],[4,5]]</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Print</span><span class="params">(self,pRoot)</span>:</span></span><br><span class="line">        result = []</span><br><span class="line">        self.level(pRoot, <span class="number">0</span>, result)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">level</span><span class="params">(self, root, level, result)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> level == len(result):</span><br><span class="line">            result.append([])<span class="comment">#为每一层建立子序列,</span></span><br><span class="line">            <span class="comment">#实际上这里需要追加子序列的情况：1.根节点时level=0=len(result)，建立子序列；</span></span><br><span class="line">            <span class="comment">#2.假如左节点成立的话，左节点时level+1=len(result)，需要建立子序列。而此后在判断同层右节点时，level已经变化多次，不再需要建立子序列。</span></span><br><span class="line">            <span class="comment">#3.假如左节点不成立的话，在判断右节点时level+1=len(result)，需要建立子序列。</span></span><br><span class="line">        result[level].append(root.val)<span class="comment">#将节点值放入对应的子序列</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> root.left:</span><br><span class="line">            self.level(root.left, level+<span class="number">1</span>, result)<span class="comment">#左节点</span></span><br><span class="line">        <span class="keyword">if</span> root.right:</span><br><span class="line">            self.level(root.right, level+<span class="number">1</span>, result)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">root = TreeNode(<span class="number">8</span>)</span><br><span class="line">a = TreeNode(<span class="number">6</span>)</span><br><span class="line">b = TreeNode(<span class="number">10</span>)</span><br><span class="line">c = TreeNode(<span class="number">5</span>)</span><br><span class="line">d = TreeNode(<span class="number">7</span>)</span><br><span class="line">e = TreeNode(<span class="number">9</span>)</span><br><span class="line">f = TreeNode(<span class="number">11</span>)</span><br><span class="line">g = TreeNode(<span class="number">12</span>)</span><br><span class="line">h = TreeNode(<span class="number">13</span>)</span><br><span class="line"> </span><br><span class="line">root.left = a</span><br><span class="line">root.right = b</span><br><span class="line">a.left = c</span><br><span class="line">a.right = d</span><br><span class="line">b.left = e</span><br><span class="line">b.right = f</span><br><span class="line">d.left = g</span><br><span class="line">d.right = h</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">method = Solution1()</span><br><span class="line">answer = method.Print(root)</span><br><span class="line">answer</span><br></pre></td></tr></table></figure><pre><code>[[8], [6, 10], [5, 7, 9, 11], [12, 13]]</code></pre><p>参考：</p><p>1.<a href="https://blog.csdn.net/fuxuemingzhu/article/details/79725053" target="_blank" rel="noopener">https://blog.csdn.net/fuxuemingzhu/article/details/79725053</a></p><p>2.<a href="https://blog.csdn.net/qq_18254385/article/details/94736589" target="_blank" rel="noopener">https://blog.csdn.net/qq_18254385/article/details/94736589</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目：&lt;a href=&quot;https://www.nowcoder.com/ta/coding-interviews?query=&amp;amp;asc=true&amp;amp;order=&amp;amp;page=3&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https
      
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="剑指offer" scheme="http://yoursite.com/tags/%E5%89%91%E6%8C%87offer/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>面试题4：二维数组中的查找</title>
    <link href="http://yoursite.com/2020/01/09/%E9%9D%A2%E8%AF%95%E9%A2%984%EF%BC%9A%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/"/>
    <id>http://yoursite.com/2020/01/09/%E9%9D%A2%E8%AF%95%E9%A2%984%EF%BC%9A%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/</id>
    <published>2020-01-09T13:51:38.387Z</published>
    <updated>2019-08-06T12:35:10.637Z</updated>
    
    <content type="html"><![CDATA[<p><strong>题目：</strong><br>在一个二维数组中（每个一维数组的长度相同），<br>每一行都按照从左到右递增的顺序排序；<br>每一列都按照从上到下递增的顺序排序；<br>请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><p><strong>思考：</strong><br>什么是二维数组？<br>直观的想到矩阵,实际上python当中没有数组的概念, 而是列表(List), 二维列表相当于二维数组 。<br>如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">array = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">9</span>],[<span class="number">2</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">12</span>],[<span class="number">4</span>,<span class="number">7</span>,<span class="number">10</span>,<span class="number">13</span>],[<span class="number">6</span>,<span class="number">8</span>,<span class="number">11</span>,<span class="number">15</span>]])</span><br><span class="line">array<span class="comment">#</span></span><br></pre></td></tr></table></figure><pre><code>array([[ 1,  2,  8,  9],       [ 2,  4,  9, 12],       [ 4,  7, 10, 13],       [ 6,  8, 11, 15]])</code></pre><p><strong>实现</strong></p><p>1.最直观的是直接循环遍历每一个元素，判断是否等于给定的整数，如果相等则输出存在，否则不存在</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># array 二维列表</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Find</span><span class="params">(self, target, array)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(array)):<span class="comment"># row = len(array) #列表的长度（有多少个元素，这里元素也是列表），可以看作是二维数组的行数</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(array[<span class="number">0</span>])):<span class="comment">#col = len(array[0])#列表第0个元素的长度，可以看作是二维数组的列数</span></span><br><span class="line">                <span class="keyword">if</span> array[i][j] == target:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">method = Solution()</span><br><span class="line">answer = method.Find(<span class="number">70</span>,array)</span><br><span class="line">answer</span><br></pre></td></tr></table></figure><p>2.由于数组元素是分别<strong>按行按列递增</strong>的，考虑:将目标值与较大的元素进行比较,通过排除较大值向下遍历</p><p>从<strong>最后一行第一列</strong>开始遍历,记给定的整数为target，数组元素为array[i][j]<br>如果 target &lt; array[i][j] 则<strong>行数减1</strong><br>如果 target &gt; array[i][j] 则<strong>列数加1</strong><br>如果 target == array[i][j] 则返还True</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># array 二维列表</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Find</span><span class="params">(self, target, array)</span>:</span></span><br><span class="line">        fond = <span class="number">0</span></span><br><span class="line">        row = len(array) - <span class="number">1</span> </span><br><span class="line">        col = len(array[<span class="number">0</span>]) - <span class="number">1</span> </span><br><span class="line">        i = row</span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &gt;= <span class="number">0</span> <span class="keyword">and</span> j &lt;= col:</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> target &lt; array[i][j]:</span><br><span class="line">                i = i - <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> target &gt; array[i][j]:</span><br><span class="line">                j = j + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">method = Solution()</span><br><span class="line">answer=method.Find(<span class="number">5</span>,array)</span><br><span class="line">answer</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;题目：&lt;/strong&gt;&lt;br&gt;在一个二维数组中（每个一维数组的长度相同），&lt;br&gt;每一行都按照从左到右递增的顺序排序；&lt;br&gt;每一列都按照从上到下递增的顺序排序；&lt;br&gt;请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="剑指offer" scheme="http://yoursite.com/tags/%E5%89%91%E6%8C%87offer/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>面试题5：空格替换</title>
    <link href="http://yoursite.com/2020/01/09/%E9%9D%A2%E8%AF%95%E9%A2%985%EF%BC%9A%E7%A9%BA%E6%A0%BC%E6%9B%BF%E6%8D%A2/"/>
    <id>http://yoursite.com/2020/01/09/%E9%9D%A2%E8%AF%95%E9%A2%985%EF%BC%9A%E7%A9%BA%E6%A0%BC%E6%9B%BF%E6%8D%A2/</id>
    <published>2020-01-09T13:51:38.387Z</published>
    <updated>2019-08-06T12:36:55.024Z</updated>
    
    <content type="html"><![CDATA[<p>题目：<br><a href="https://www.nowcoder.com/ta/coding-interviews" target="_blank" rel="noopener">https://www.nowcoder.com/ta/coding-interviews</a></p><p>将特殊字符替换成ASCII码，例如空格对应32(0x20).在网络编程的背景中为了使服务器识别特殊字符需要做的转换是：</p><p>空格—&gt;’%20’。</p><p>例如：当字符串为’We Are Happy.’则经过替换之后的字符串为’We%20Are%20Happy.’</p><p>思考：<br>基于python的特点，</p><p>如何对字符串进行替换操作？先看看字符串中有哪些常用方法。</p><p>观察到<strong>s.replace(old,new)</strong>可以对字符串进行替换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'we are happy.'</span></span><br></pre></td></tr></table></figure><p>方法1. 利用python的语言特点作字符串替换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">replaceSpace1</span><span class="params">(self, s)</span>:</span><span class="comment">#s为含空格字符串</span></span><br><span class="line">        <span class="keyword">return</span> s.replace(<span class="string">" "</span>, <span class="string">"%20"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">method = Solution()</span><br><span class="line">answer = method.replaceSpace1(s)</span><br><span class="line">answer</span><br></pre></td></tr></table></figure><pre><code>&apos;we%20are%20happy.&apos;</code></pre><p>方法2. 从前往后遍历，依次替换空格</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">replaceSpace2</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        s_new = <span class="string">""</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> i == <span class="string">" "</span>:</span><br><span class="line">                i = <span class="string">"%20"</span></span><br><span class="line">            s_new += i</span><br><span class="line">        <span class="keyword">return</span> s_new</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">method = Solution()</span><br><span class="line">answer = method.replaceSpace2(s)</span><br><span class="line">answer</span><br></pre></td></tr></table></figure><pre><code>&apos;we%20are%20happy.&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">方法<span class="number">3.</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">replaceSpace3</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        s = list(s)<span class="comment">#转换成列表</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)):</span><br><span class="line">            <span class="keyword">if</span> s[i] == <span class="string">" "</span>:</span><br><span class="line">                s[i] = <span class="string">"%20"</span></span><br><span class="line"><span class="comment">#         return s</span></span><br><span class="line"><span class="comment">#         return " ".join(s)#用空格连接各个元素，返回如'w e %20 a r e %20 h a p p y .'</span></span><br><span class="line"><span class="comment">#         return "_".join(s)#用下划线'_'连接各个元素，返回如'w_e_%20_a_r_e_%20_h_a_p_p_y_.'</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>.join(s)<span class="comment">#不用空格或其他任何东西连接各个元素，返回如'we%20are%20happy.'</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">method = Solution()</span><br><span class="line">answer = method.replaceSpace3(s)</span><br><span class="line">answer</span><br></pre></td></tr></table></figure><pre><code>&apos;we%20are%20happy.&apos;</code></pre><p>join的用法简单来说就是连接字符串。</p><p>join将<strong>容器对象</strong>拆分并以指定的字符将列表内的元素(element)连接起来，返回字符串（注：容器对象内的元素须为字符类型）</p><p><a href="https://www.cnblogs.com/hokky/p/8479991.html" target="_blank" rel="noopener">https://www.cnblogs.com/hokky/p/8479991.html</a></p><p><strong>与join相反，split以指定的字符将字符串分割为单个元素(字符类型)并加入list中，返回一个List</strong></p><p>reference：</p><p>1.<a href="https://blog.csdn.net/Datawhale/article/details/81944081" target="_blank" rel="noopener">https://blog.csdn.net/Datawhale/article/details/81944081</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目：&lt;br&gt;&lt;a href=&quot;https://www.nowcoder.com/ta/coding-interviews&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.nowcoder.com/ta/coding-intervie
      
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="剑指offer" scheme="http://yoursite.com/tags/%E5%89%91%E6%8C%87offer/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>面试题28：对称的二叉树</title>
    <link href="http://yoursite.com/2020/01/09/%E9%9D%A2%E8%AF%95%E9%A2%9828%EF%BC%9A%E5%AF%B9%E7%A7%B0%E7%9A%84%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>http://yoursite.com/2020/01/09/%E9%9D%A2%E8%AF%95%E9%A2%9828%EF%BC%9A%E5%AF%B9%E7%A7%B0%E7%9A%84%E4%BA%8C%E5%8F%89%E6%A0%91/</id>
    <published>2020-01-09T13:51:38.372Z</published>
    <updated>2019-09-01T14:07:57.241Z</updated>
    
    <content type="html"><![CDATA[<p>题目：<a href="https://www.nowcoder.com/ta/coding-interviews" target="_blank" rel="noopener">https://www.nowcoder.com/ta/coding-interviews</a></p><p>请实现一个函数，用来判断一颗二叉树是不是对称的。如果一个二叉树同此二叉树的镜像是同样的，定义其为对称的。</p><p>简单的考虑是：</p><p>1.比较树的根节点是否存在</p><p>2.根节点存在，则比较root.left？==root.right</p><p>3.若2成立，则针对两颗子树，判断 root1.left？==root2.right &amp; root1.right？==root2.left，并不断重复这个过程</p><p>利用递归设计2-3（返回True或者False），在判断方法中调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isSymmetrical</span><span class="params">(self, pRoot)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> pRoot:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> self.isSymmetricalTree(pRoot.left, pRoot.right)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isSymmetricalTree</span><span class="params">(self,root1,root2)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root1 <span class="keyword">and</span> <span class="keyword">not</span> root2:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root1 <span class="keyword">or</span> <span class="keyword">not</span> root2:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> root1.val == root2.val:</span><br><span class="line">            <span class="keyword">return</span> self.isSymmetricalTree(root1.left,root2.right) <span class="keyword">and</span> self.isSymmetricalTree(root1.right,root2.left)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>参考：<a href="https://blog.csdn.net/u014568072/article/details/87913092" target="_blank" rel="noopener">https://blog.csdn.net/u014568072/article/details/87913092</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目：&lt;a href=&quot;https://www.nowcoder.com/ta/coding-interviews&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.nowcoder.com/ta/coding-interviews&lt;/
      
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="剑指offer" scheme="http://yoursite.com/tags/%E5%89%91%E6%8C%87offer/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>面试题32：之字形打印二叉树</title>
    <link href="http://yoursite.com/2020/01/09/%E9%9D%A2%E8%AF%95%E9%A2%9832%EF%BC%9A%E4%B9%8B%E5%AD%97%E5%BD%A2%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>http://yoursite.com/2020/01/09/%E9%9D%A2%E8%AF%95%E9%A2%9832%EF%BC%9A%E4%B9%8B%E5%AD%97%E5%BD%A2%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91/</id>
    <published>2020-01-09T13:51:38.372Z</published>
    <updated>2019-09-01T14:07:43.042Z</updated>
    
    <content type="html"><![CDATA[<p>题目：<a href="https://www.nowcoder.com/ta/coding-interviews?page=3" target="_blank" rel="noopener">https://www.nowcoder.com/ta/coding-interviews?page=3</a></p><p>请实现一个函数按照之字形打印二叉树，即第一行按照从左到右的顺序打印，第二层按照从右至左的顺序打印，第三行按照从左到右的顺序打印，其他行以此类推。</p><p>考虑：跟之前按行打印二叉树的思路，先将二叉树按行分别存入二维列表，然后将特定的子列表翻转</p><p>列表翻转：</p><p>1.<a href="https://www.runoob.com/python3/python-reversing-list.html" target="_blank" rel="noopener">https://www.runoob.com/python3/python-reversing-list.html</a></p><p>2.<a href="https://www.runoob.com/python3/python-slicing-rotate-string.html" target="_blank" rel="noopener">https://www.runoob.com/python3/python-slicing-rotate-string.html</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#列表翻转</span></span><br><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>] </span><br><span class="line">print(a) </span><br><span class="line">d=a[::<span class="number">-1</span>]<span class="comment">#对列表切片翻转</span></span><br><span class="line">print(a) </span><br><span class="line">c=a</span><br><span class="line">print(d) </span><br><span class="line">c.reverse() <span class="comment">#会改变原有列表</span></span><br><span class="line">print(c) </span><br><span class="line">print(a) <span class="comment">#??为什么a会被改变</span></span><br></pre></td></tr></table></figure><pre><code>[1, 2, 3, 4, 5, 6, 7, 8, 9][1, 2, 3, 4, 5, 6, 7, 8, 9][9, 8, 7, 6, 5, 4, 3, 2, 1][9, 8, 7, 6, 5, 4, 3, 2, 1][9, 8, 7, 6, 5, 4, 3, 2, 1]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Reverse</span><span class="params">(lst)</span>:</span> </span><br><span class="line">    lst.reverse() </span><br><span class="line">    <span class="keyword">return</span> lst </span><br><span class="line">      </span><br><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>] </span><br><span class="line">print(Reverse(a))</span><br></pre></td></tr></table></figure><pre><code>[9, 8, 7, 6, 5, 4, 3, 2, 1]</code></pre><p>for循环步长：<a href="https://www.runoob.com/python3/python3-loop.html" target="_blank" rel="noopener">https://www.runoob.com/python3/python3-loop.html</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将索引为奇数（第偶数：2、4）个子列表翻转</span></span><br><span class="line">res = [[<span class="number">8</span>], [<span class="number">6</span>, <span class="number">10</span>], [<span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>], [<span class="number">12</span>, <span class="number">13</span>]]</span><br><span class="line"><span class="keyword">for</span> level <span class="keyword">in</span> range(<span class="number">1</span>, len(res), <span class="number">2</span>):</span><br><span class="line">    res[level] = res[level][::<span class="number">-1</span>]</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><pre><code>[[8], [10, 6], [5, 7, 9, 11], [13, 12]]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">root = TreeNode(<span class="number">8</span>)</span><br><span class="line">a = TreeNode(<span class="number">6</span>)</span><br><span class="line">b = TreeNode(<span class="number">10</span>)</span><br><span class="line">c = TreeNode(<span class="number">5</span>)</span><br><span class="line">d = TreeNode(<span class="number">7</span>)</span><br><span class="line">e = TreeNode(<span class="number">9</span>)</span><br><span class="line">f = TreeNode(<span class="number">11</span>)</span><br><span class="line">g = TreeNode(<span class="number">12</span>)</span><br><span class="line">h = TreeNode(<span class="number">13</span>)</span><br><span class="line"> </span><br><span class="line">root.left = a</span><br><span class="line">root.right = b</span><br><span class="line">a.left = c</span><br><span class="line">a.right = d</span><br><span class="line">b.left = e</span><br><span class="line">b.right = f</span><br><span class="line">d.left = g</span><br><span class="line">d.right = h</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Print</span><span class="params">(self, pRoot)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> pRoot:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        result = []</span><br><span class="line">        level = <span class="number">0</span></span><br><span class="line">        self.level(pRoot, level, result)<span class="comment">#和之前一样，得到按行对应的二维列表</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> level <span class="keyword">in</span> range(<span class="number">1</span>, len(result), <span class="number">2</span>):<span class="comment">#将索引为奇数（第偶数：2、4）个子列表翻转</span></span><br><span class="line">            result[level] = result[level][::<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">level</span><span class="params">(self, root, level, result)</span>:</span><span class="comment">#和之前一样，得到按行对应的二维列表</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> level == len(result):</span><br><span class="line">            result.append([])</span><br><span class="line">        result[level].append(root.val)</span><br><span class="line">        <span class="keyword">if</span> root.left:</span><br><span class="line">            self.level(root.left, level+<span class="number">1</span>, result)</span><br><span class="line">        <span class="keyword">if</span> root.right:</span><br><span class="line">            self.level(root.right, level+<span class="number">1</span>, result)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">method = Solution()</span><br><span class="line">answer = method.Print(root)</span><br><span class="line">answer</span><br></pre></td></tr></table></figure><pre><code>[[8], [10, 6], [5, 7, 9, 11], [13, 12]]</code></pre><p>参考：<a href="https://blog.csdn.net/fuxuemingzhu/article/details/79724959" target="_blank" rel="noopener">https://blog.csdn.net/fuxuemingzhu/article/details/79724959</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目：&lt;a href=&quot;https://www.nowcoder.com/ta/coding-interviews?page=3&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.nowcoder.com/ta/coding-inter
      
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="剑指offer" scheme="http://yoursite.com/tags/%E5%89%91%E6%8C%87offer/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>面试题15：二进制中1的个数</title>
    <link href="http://yoursite.com/2020/01/09/%E9%9D%A2%E8%AF%95%E9%A2%9815%EF%BC%9A%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%AD1%E7%9A%84%E4%B8%AA%E6%95%B0/"/>
    <id>http://yoursite.com/2020/01/09/%E9%9D%A2%E8%AF%95%E9%A2%9815%EF%BC%9A%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%AD1%E7%9A%84%E4%B8%AA%E6%95%B0/</id>
    <published>2020-01-09T13:51:38.356Z</published>
    <updated>2019-09-01T14:07:52.423Z</updated>
    
    <content type="html"><![CDATA[<p>题目：<a href="https://www.nowcoder.com/ta/coding-interviews" target="_blank" rel="noopener">https://www.nowcoder.com/ta/coding-interviews</a></p><p>输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。</p><p>求整数的补码：</p><p>1、正整数的补码是其二进制表示，与原码相同；</p><p>例如：5（00000101）</p><p>2、负整数的补码：将其对应正数二进制表示所有位取反（包括符号位，0变1，1变0）后加1。</p><p>例如：-5对应正数5（00000101）→所有位取反（11111010）→加1(11111011)</p><p>根据补码求原码：</p><p>已知一个数的补码，则对应原码为：对该补码再求补码。</p><p>python中得到一个数n的补码：n &amp; 0xffffffff(这个做法来自网络，具体原因未知)，<br>所以直接的做法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution1</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">NumberOf1</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> n &lt; <span class="number">0</span>:</span><br><span class="line">            n = n &amp; <span class="number">0xffffffff</span></span><br><span class="line">        <span class="keyword">return</span> bin(n).count(<span class="string">'1'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">method = Solution1()</span><br><span class="line">answer = method.NumberOf1(<span class="number">-1</span>)</span><br><span class="line">answer</span><br></pre></td></tr></table></figure><pre><code>32</code></pre><p>把一个整数减去1之后再和原来的整数做按位与，得到的结果相当于是把整数的二进制表示中最右边的一个1变成0,一个整数的二进制表示有多少个1则可以进行多少次这样的操作</p><p>根据上述特点可以得到一种求解方案，这也是《剑指offer》一书提供的精巧思路</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution2</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">NumberOf1</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> n &lt; <span class="number">0</span>:</span><br><span class="line">            n = n &amp; <span class="number">0xffffffff</span><span class="comment">#得到负数的补码，计算机中负数以二进制补码形式存在</span></span><br><span class="line">        <span class="keyword">while</span> n:</span><br><span class="line">            n = n &amp; (n<span class="number">-1</span>)</span><br><span class="line">            count += <span class="number">1</span><span class="comment">#count =count + 1</span></span><br><span class="line">        <span class="keyword">return</span> count</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">method = Solution2()</span><br><span class="line">answer = method.NumberOf1(<span class="number">-1</span>)</span><br><span class="line">answer</span><br></pre></td></tr></table></figure><pre><code>32</code></pre><p>以下也是一种特别的方案，来自参考链接中的博主。</p><p>具体是：将负数-n转换为正n，然后计算(n-1)中的1的位数，再用32减之，刚好得到负数补码中1的位数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution3</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">NumberOf1</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> n&gt;=<span class="number">0</span>:</span><br><span class="line">            count = bin(n).count(<span class="string">'1'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            n=abs(n)</span><br><span class="line">            count = <span class="number">32</span> - bin(n<span class="number">-1</span>).count(<span class="string">'1'</span>)<span class="comment">#和之前Solution2中的做法的联系是什么？</span></span><br><span class="line">        <span class="keyword">return</span> count</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">method = Solution3()</span><br><span class="line">answer = method.NumberOf1(<span class="number">-1</span>)</span><br><span class="line">answer</span><br></pre></td></tr></table></figure><pre><code>32</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin(<span class="number">-11</span>)</span><br></pre></td></tr></table></figure><pre><code>&apos;-0b1011&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin(<span class="number">-11</span>).replace(<span class="string">'0b'</span>,<span class="string">''</span>)</span><br></pre></td></tr></table></figure><pre><code>&apos;-1011&apos;</code></pre><p>移位操作：（确定位长）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution4</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">NumberOf1</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">32</span>):</span><br><span class="line">            <span class="keyword">if</span> n &amp; <span class="number">1</span>:<span class="comment">#与1做位与</span></span><br><span class="line">                count = count + <span class="number">1</span></span><br><span class="line">            n = n &gt;&gt; <span class="number">1</span><span class="comment">#右移n，舍弃最右位，最左尾添0。右移一次，丢弃最右一个‘1’。</span></span><br><span class="line">        <span class="keyword">return</span> count</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">method = Solution4()</span><br><span class="line">answer = method.NumberOf1(<span class="number">-1</span>)</span><br><span class="line">answer</span><br></pre></td></tr></table></figure><pre><code>32</code></pre><p>另一种移位操作：（确定位长）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution5</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">NumberOf1</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        operator = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">32</span>):<span class="comment">#32位</span></span><br><span class="line">            <span class="keyword">if</span> n &amp; operator:<span class="comment">#带判断数n与操作数operator做位与</span></span><br><span class="line">                count = count + <span class="number">1</span></span><br><span class="line">            operator = operator &lt;&lt; <span class="number">1</span><span class="comment">#操作数operator左移，而不是n右移。左移一次，消掉最右一个‘1’。</span></span><br><span class="line">        <span class="keyword">return</span> count</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">method = Solution5()</span><br><span class="line">answer = method.NumberOf1(<span class="number">-1</span>)</span><br><span class="line">answer</span><br></pre></td></tr></table></figure><pre><code>32</code></pre><p>参考：<br>1、<a href="https://blog.csdn.net/Datawhale/article/details/82182612" target="_blank" rel="noopener">https://blog.csdn.net/Datawhale/article/details/82182612</a></p><p>2、<a href="https://blog.csdn.net/fuxuemingzhu/article/details/79512764" target="_blank" rel="noopener">https://blog.csdn.net/fuxuemingzhu/article/details/79512764</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目：&lt;a href=&quot;https://www.nowcoder.com/ta/coding-interviews&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.nowcoder.com/ta/coding-interviews&lt;/
      
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="剑指offer" scheme="http://yoursite.com/tags/%E5%89%91%E6%8C%87offer/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>面试题27：二叉树的镜像</title>
    <link href="http://yoursite.com/2020/01/09/%E9%9D%A2%E8%AF%95%E9%A2%9827%EF%BC%9A%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%95%9C%E5%83%8F/"/>
    <id>http://yoursite.com/2020/01/09/%E9%9D%A2%E8%AF%95%E9%A2%9827%EF%BC%9A%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%95%9C%E5%83%8F/</id>
    <published>2020-01-09T13:51:38.356Z</published>
    <updated>2019-09-01T14:07:37.697Z</updated>
    
    <content type="html"><![CDATA[<p>题目：<a href="https://www.nowcoder.com/ta/coding-interviews" target="_blank" rel="noopener">https://www.nowcoder.com/ta/coding-interviews</a></p><p>操作给定的二叉树，将其变换为源二叉树的镜像。</p><p>思考：</p><p>反转根节点的左右子节点，这样<strong>把左右子节点带着的子树进行了调整</strong>；接下来对翻转后的左节点进行左右子节点的调整；翻转后的右节点操作同理；</p><p>当交换完所有非也节点的左右子节点后，就可以得到原树的镜像。</p><p>实际操作：</p><p>反转二叉树的左右节点，其实直接反转就好了：root.left,root.right = root.right, root.left</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Mirror</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        root.left,root.right = root.right, root.left</span><br><span class="line">        <span class="keyword">if</span> root.left:</span><br><span class="line">            self.Mirror(root.left)</span><br><span class="line">        <span class="keyword">if</span> root.right:</span><br><span class="line">            self.Mirror(root.right)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目：&lt;a href=&quot;https://www.nowcoder.com/ta/coding-interviews&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.nowcoder.com/ta/coding-interviews&lt;/
      
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="剑指offer" scheme="http://yoursite.com/tags/%E5%89%91%E6%8C%87offer/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>面试题10：斐波拉契数列</title>
    <link href="http://yoursite.com/2020/01/09/%E9%9D%A2%E8%AF%95%E9%A2%9810%EF%BC%9A%E6%96%90%E6%B3%A2%E6%8B%89%E5%A5%91%E6%95%B0%E5%88%97/"/>
    <id>http://yoursite.com/2020/01/09/%E9%9D%A2%E8%AF%95%E9%A2%9810%EF%BC%9A%E6%96%90%E6%B3%A2%E6%8B%89%E5%A5%91%E6%95%B0%E5%88%97/</id>
    <published>2020-01-09T13:51:38.340Z</published>
    <updated>2019-08-06T12:43:54.830Z</updated>
    
    <content type="html"><![CDATA[<p>题目：<a href="https://www.nowcoder.com/ta/coding-interviews" target="_blank" rel="noopener">https://www.nowcoder.com/ta/coding-interviews</a></p><p>现在要求输入一个整数n；</p><p>输出斐波那契数列的第n项（从0开始，第0项为0）。<br>n&lt;=39</p><p>斐波那契数列 ：</p><p>因数学家列昂纳多·斐波那契（Leonardoda Fibonacci）以兔子繁殖为例子而引入，故又称为“兔子数列”，指的是这样一个数列：1、1、2、3、5、8、13、21、34、……在数学上，斐波纳契数列以如下被以递推的方法定义：F(1)=1，F(2)=1, F(n)=F(n-1)+F(n-2)（n&gt;=2，n∈N*）</p><p>方法1：直接利用递归的方法</p><p>这样的方法效率低，存在大量重复计算:</p><p>例如，想过要求得f(10)需要先求得f(9)、f(8)；要求得f(9)要先求得f(8)、f(7)…如此等等。在剑指offer中给出了直观的依赖关系树形结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Fibonacci</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> n&lt;=<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">elif</span> n == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.Fibonacci(n<span class="number">-1</span>)+ self.Fibonacci(n<span class="number">-2</span>)<span class="comment">#递归调用的写法！！！self.function</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">method = Solution()</span><br><span class="line">answer = method.Fibonacci(<span class="number">8</span>)</span><br><span class="line">answer</span><br></pre></td></tr></table></figure><pre><code>21</code></pre><p>解法2：</p><p>为了避免重复计算，可以选择从下往上计算，f(0)–&gt;f(1)–&gt;f(2)–&gt;…–&gt;f(10)…以此类推得到第n项。时间复杂度为O(n)。<br>可以用数组存储，空间复杂度 O(n)；也可以用变量存储，空间复杂度 O(1)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution1</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Fibonacci</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> n&lt;=<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">elif</span> n == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            a = <span class="number">0</span></span><br><span class="line">            b = <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,n+<span class="number">1</span>):<span class="comment">#从第2到n</span></span><br><span class="line">                b = a + b<span class="comment">#更新b（当前非波拉契数列的值）</span></span><br><span class="line">                a = b - a<span class="comment">#a（保留前一个非波拉契数列的值）</span></span><br><span class="line">            <span class="keyword">return</span> b</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">method = Solution1()</span><br><span class="line">answer = method.Fibonacci(<span class="number">8</span>)</span><br><span class="line">answer</span><br></pre></td></tr></table></figure><pre><code>21</code></pre><p>方法3：利用python的相关特性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution2</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Fibonacci</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> n&lt;=<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> n==<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            a,b=<span class="number">0</span>,<span class="number">1</span> </span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(n<span class="number">-1</span>):<span class="comment">#循环n-1次</span></span><br><span class="line">                a,b=b,a+b<span class="comment">#a的变化？先计算右边的值再同时赋值给左边</span></span><br><span class="line">            <span class="keyword">return</span> b</span><br></pre></td></tr></table></figure><p>先将b赋予a；再更新b，跟Solution1中的方法相似</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">method = Solution2()</span><br><span class="line">answer = method.Fibonacci(<span class="number">3</span>)</span><br><span class="line">answer</span><br></pre></td></tr></table></figure><pre><code>2</code></pre><p>利用列表来实现是我感觉很赞的方法,最直观明了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution3</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Fibonacci</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        a = [<span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> n&lt;=<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> a[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> n==<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> a[n]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, n+<span class="number">1</span>):</span><br><span class="line">                a.append(a[i<span class="number">-1</span>] + a[i<span class="number">-2</span>])</span><br><span class="line">        <span class="keyword">return</span> a[n]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">method = Solution3()</span><br><span class="line">answer = method.Fibonacci(<span class="number">8</span>)</span><br><span class="line">answer</span><br></pre></td></tr></table></figure><pre><code>21</code></pre><p>参考：</p><p><a href="https://blog.csdn.net/fuxuemingzhu/article/details/79501434" target="_blank" rel="noopener">https://blog.csdn.net/fuxuemingzhu/article/details/79501434</a></p><p><a href="https://blog.csdn.net/Datawhale/article/details/82152447" target="_blank" rel="noopener">https://blog.csdn.net/Datawhale/article/details/82152447</a></p><p><a href="https://doocs.gitee.io/coding-interview/#/docs/coding-interview" target="_blank" rel="noopener">https://doocs.gitee.io/coding-interview/#/docs/coding-interview</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目：&lt;a href=&quot;https://www.nowcoder.com/ta/coding-interviews&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.nowcoder.com/ta/coding-interviews&lt;/
      
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="剑指offer" scheme="http://yoursite.com/tags/%E5%89%91%E6%8C%87offer/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>面试题10：跳台阶</title>
    <link href="http://yoursite.com/2020/01/09/%E9%9D%A2%E8%AF%95%E9%A2%9810%EF%BC%9A%E8%B7%B3%E5%8F%B0%E9%98%B6/"/>
    <id>http://yoursite.com/2020/01/09/%E9%9D%A2%E8%AF%95%E9%A2%9810%EF%BC%9A%E8%B7%B3%E5%8F%B0%E9%98%B6/</id>
    <published>2020-01-09T13:51:38.340Z</published>
    <updated>2019-09-01T14:08:03.130Z</updated>
    
    <content type="html"><![CDATA[<p>题目：<a href="https://www.nowcoder.com/ta/coding-interviews" target="_blank" rel="noopener">https://www.nowcoder.com/ta/coding-interviews</a></p><p>这是在“面试题10：非波拉契数列”中的另一个题目</p><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法（先后次序不同算不同的结果）。</p><p>理解：</p><p>如果有1级台阶，只有1种 ；如果有2级台阶，有1–1、2两种 ；如果有3级台阶，有1–1–1、1–2、2–1三种跳法</p><p>假设n级台阶有F(n)种跳法，一定是先跳1级或者先跳2级这两类方式，再继续跳到n级台阶，跳1级后有F(n-1)种，跳2级后有F(n-2)种，故共有F(n)=F(n-1)+F(n-2)。这与斐波拉契数列一致。</p><p>但是跳台阶没有0级台阶：F(1)=1,F(2)=2,F(3)=3,F(4)=5,…,F(n)=F(n-1)+F(n-2),…</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution1</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">jumpFloor</span><span class="params">(self, number)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> number == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> number == <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            a = <span class="number">1</span></span><br><span class="line">            b = <span class="number">2</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,number):</span><br><span class="line">                b = a + b</span><br><span class="line">                a = b - a</span><br><span class="line">            <span class="keyword">return</span> b</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">method = Solution1()</span><br><span class="line">answer = method.jumpFloor(<span class="number">5</span>)</span><br><span class="line">answer</span><br></pre></td></tr></table></figure><pre><code>8</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">jumpFloor</span><span class="params">(self, number)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> number == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> number == <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            a = <span class="number">1</span></span><br><span class="line">            b = <span class="number">2</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,number):</span><br><span class="line">                a,b = b,a+b</span><br><span class="line">            <span class="keyword">return</span> b</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">method = Solution()</span><br><span class="line">answer = method.jumpFloor(<span class="number">5</span>)</span><br><span class="line">answer</span><br></pre></td></tr></table></figure><pre><code>8</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目：&lt;a href=&quot;https://www.nowcoder.com/ta/coding-interviews&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.nowcoder.com/ta/coding-interviews&lt;/
      
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="剑指offer" scheme="http://yoursite.com/tags/%E5%89%91%E6%8C%87offer/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>面试题11：旋转数组的最小数字</title>
    <link href="http://yoursite.com/2020/01/09/%E9%9D%A2%E8%AF%95%E9%A2%9811%EF%BC%9A%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97/"/>
    <id>http://yoursite.com/2020/01/09/%E9%9D%A2%E8%AF%95%E9%A2%9811%EF%BC%9A%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97/</id>
    <published>2020-01-09T13:51:38.340Z</published>
    <updated>2019-08-21T13:29:47.174Z</updated>
    
    <content type="html"><![CDATA[<p>题目：<a href="https://www.nowcoder.com/ta/coding-interviews" target="_blank" rel="noopener">https://www.nowcoder.com/ta/coding-interviews</a></p><p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。</p><p>输入一个<strong>非递减排序</strong>的数组的一个旋转，输出旋转数组的最小元素。</p><p>例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。</p><p>NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。</p><p>思考：</p><p>利用旋转数组的特性来设计查找最小值的方法。</p><p>原数组是<strong>非递减排序</strong>的，旋转数组可划分为两个非递减子数组，并且前面子数组的元素都&gt;=后面子数组的元素，最小元素恰好是两个数组的分界线；</p><p>暴力的o(n)查找</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution1</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minNumberInRotateArray</span><span class="params">(self, rotateArray)</span>:</span></span><br><span class="line">        min = rotateArray[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> len(rotateArray)==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span> </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(rotateArray)):</span><br><span class="line">                <span class="keyword">if</span> rotateArray[i] &lt; min:</span><br><span class="line">                    min = rotateArray[i]</span><br><span class="line">            <span class="keyword">return</span> min</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rotateArray = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">method = Solution1()</span><br><span class="line">method.minNumberInRotateArray(rotateArray)</span><br></pre></td></tr></table></figure><pre><code>1</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># for i in range(0,5):#不会包含最后一个索引，左闭右开</span></span><br><span class="line"><span class="comment">#     print(i)</span></span><br><span class="line"><span class="comment"># for i in range(0,len(rotateArray)):</span></span><br><span class="line"><span class="comment">#     print(rotateArray[i])</span></span><br></pre></td></tr></table></figure><p>根据旋转数组的特性设计二分查找:</p><p>1.设置中间点，标记旋转数组首元素和尾元素，中间点将数组分成两半;</p><p>2.如果中间点大于等于首元素，说明最小数字在数组后一半，如果中间点小于等于尾元素，说明最小数字在数组前一半;</p><p>3.依次改变首、尾元素的位置，当尾元素和首元素挨着的时候，这时候<strong>尾元素</strong>就是所找的最小值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution2</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minNumberInRotateArray</span><span class="params">(self, rotateArray)</span>:</span></span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">        right = len(rotateArray)<span class="number">-1</span></span><br><span class="line">        <span class="keyword">if</span> len(rotateArray)==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">while</span>(right - left) &gt; <span class="number">1</span>:</span><br><span class="line">                mid = (left + right)//<span class="number">2</span><span class="comment">#商向下取整的结果</span></span><br><span class="line">                <span class="keyword">if</span> rotateArray[mid] &gt;= rotateArray[left]:<span class="comment">#中间值在第一组比左大，最小值在mid右</span></span><br><span class="line">                    left = mid<span class="comment">#更新左 </span></span><br><span class="line">                <span class="keyword">elif</span> rotateArray[mid] &lt;= rotateArray[right]:<span class="comment">#中间值在第二组比右小，最小值在mid左</span></span><br><span class="line">                    right = mid<span class="comment">#更新右</span></span><br><span class="line">            <span class="keyword">return</span> rotateArray[right]<span class="comment">#右元素为最小</span></span><br><span class="line">            <span class="comment">#当不满足while条件时，说明数组有两个元素（或者一个元素），直接返回旋转数组右边元素即可</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rotateArray = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">method = Solution2()</span><br><span class="line">method.minNumberInRotateArray(rotateArray)</span><br></pre></td></tr></table></figure><pre><code>1</code></pre><p>特殊的是，当首元素等于尾元素等于中间值时，以上比较规则失效，只能对数组进行顺序查找，增加如下判断：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution3</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minNumberInRotateArray</span><span class="params">(self, rotateArray)</span>:</span></span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">        right = len(rotateArray)<span class="number">-1</span></span><br><span class="line">        <span class="keyword">if</span> len(rotateArray)==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">while</span>(right - left) &gt; <span class="number">1</span>:</span><br><span class="line">                mid = (left + right)//<span class="number">2</span><span class="comment">#商向下取整的结果</span></span><br><span class="line">                <span class="keyword">if</span> rotateArray[mid] == rotateArray[left] <span class="keyword">and</span> rotateArray[mid] == rotateArray[right]:</span><br><span class="line">                    <span class="comment">#特殊情况，当首元素等于尾元素等于中间值时，只能对数组进行顺序查找</span></span><br><span class="line">                    min = rotateArray[left]</span><br><span class="line">                    <span class="keyword">for</span> i <span class="keyword">in</span> range(left,right):</span><br><span class="line">                        <span class="keyword">if</span> rotateArray[i] &lt; min:</span><br><span class="line">                            min = rotateArray[i]</span><br><span class="line">                    <span class="keyword">return</span> min </span><br><span class="line">                <span class="keyword">elif</span> rotateArray[mid] &gt;= rotateArray[left]:<span class="comment">#中间值在第一组比左大，最小值在mid右</span></span><br><span class="line">                    left = mid<span class="comment">#更新左 </span></span><br><span class="line">                <span class="keyword">elif</span> rotateArray[mid] &lt;= rotateArray[right]:<span class="comment">#中间值在第二组比右小，最小值在mid左</span></span><br><span class="line">                    right = mid<span class="comment">#更新右</span></span><br><span class="line">            <span class="keyword">return</span> rotateArray[right]<span class="comment">#右元素为最小</span></span><br><span class="line">            <span class="comment">#当不满足while条件时，说明数组有两个元素（或者一个元素），直接返回旋转数组右边元素即可</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># rotateArray = [4, 5, 6, 1, 2, 3]</span></span><br><span class="line">rotateArray = [ <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">method = Solution3()</span><br><span class="line">method.minNumberInRotateArray(rotateArray)</span><br></pre></td></tr></table></figure><pre><code>1</code></pre><p>剑指offer书中还考虑到旋转数组旋转了0个元素的情况，也就是排序数组本身:第一个元素（左）就是最小的元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minNumberInRotateArray</span><span class="params">(self, rotateArray)</span>:</span></span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">        right = len(rotateArray)<span class="number">-1</span></span><br><span class="line">        <span class="keyword">if</span> len(rotateArray)==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">elif</span> rotateArray[left] &lt; rotateArray[right]:</span><br><span class="line">            <span class="keyword">return</span> rotateArray[left]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">while</span>(right - left) &gt; <span class="number">1</span>:</span><br><span class="line">                mid = (left + right)//<span class="number">2</span><span class="comment">#商向下取整的结果</span></span><br><span class="line">                <span class="keyword">if</span> rotateArray[mid] == rotateArray[left] <span class="keyword">and</span> rotateArray[mid] == rotateArray[right]:</span><br><span class="line">                    <span class="comment">#特殊情况，当首元素等于尾元素等于中间值时，只能对数组进行顺序查找</span></span><br><span class="line">                    min = rotateArray[left]</span><br><span class="line">                    <span class="keyword">for</span> i <span class="keyword">in</span> range(left,right):</span><br><span class="line">                        <span class="keyword">if</span> rotateArray[i] &lt; min:</span><br><span class="line">                            min = rotateArray[i]</span><br><span class="line">                    <span class="keyword">return</span> min </span><br><span class="line">                <span class="keyword">elif</span> rotateArray[mid] &gt;= rotateArray[left]:<span class="comment">#中间值在第一组比左大，最小值在mid右</span></span><br><span class="line">                    left = mid<span class="comment">#更新左 </span></span><br><span class="line">                <span class="keyword">elif</span> rotateArray[mid] &lt;= rotateArray[right]:<span class="comment">#中间值在第二组比右小，最小值在mid左</span></span><br><span class="line">                    right = mid<span class="comment">#更新右</span></span><br><span class="line">            <span class="keyword">return</span> rotateArray[right]<span class="comment">#右元素为最小</span></span><br><span class="line">            <span class="comment">#当不满足while条件时，说明数组有两个元素（或者一个元素），直接返回旋转数组右边元素即可</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">rotateArray = [  <span class="number">0</span>, <span class="number">1</span>,  <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line"><span class="comment"># rotateArray = [ 1, 0, 1,  1, 1,]</span></span><br><span class="line"><span class="comment"># rotateArray = [ 1, 1, 1, 0, 1]</span></span><br><span class="line"><span class="comment"># rotateArray = [4, 5, 6, 1, 2, 3]</span></span><br><span class="line">method = Solution()</span><br><span class="line">method.minNumberInRotateArray(rotateArray)</span><br></pre></td></tr></table></figure><pre><code>0</code></pre><p>这里补充另一位博主的写法Solution4</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution4</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minNumberInRotateArray</span><span class="params">(self, rotateArray)</span>:</span></span><br><span class="line">        p1, p2 = <span class="number">0</span>, len(rotateArray) - <span class="number">1</span><span class="comment">#一样的操作固定首尾</span></span><br><span class="line">        mid = p1<span class="comment">#特殊情况下的最小值索引，即对应之前的旋转为0的旋转数组。结合下列循环条件来看，我觉得这里很精彩</span></span><br><span class="line">        <span class="keyword">while</span> rotateArray[p1] &gt;= rotateArray[p2]:<span class="comment">#和之前用索引大小来确定循环不同，这里直接用首元素&gt;=尾元素这个特性来确定循环</span></span><br><span class="line">            <span class="keyword">if</span> p2 - p1 == <span class="number">1</span>:<span class="comment">#首尾相邻，尾小，即为最小值</span></span><br><span class="line">                mid = p2<span class="comment">#最后统一返回mid索引下的元素</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"><span class="comment">#             mid = (p1 + p2) / 2#原博主写法</span></span><br><span class="line">            mid = (p1 + p2) // <span class="number">2</span><span class="comment">#这里我觉得应该是取整才对</span></span><br><span class="line">            <span class="keyword">if</span> rotateArray[mid] == rotateArray[p1] <span class="keyword">and</span> rotateArray[mid] == rotateArray[p2]:</span><br><span class="line">                <span class="keyword">return</span> self.minInOrder(rotateArray, p1, p2)<span class="comment">#特殊情况，判断失效，只能遍历</span></span><br><span class="line">            <span class="keyword">if</span> rotateArray[mid] &gt;= rotateArray[p1]:</span><br><span class="line">                p1 = mid</span><br><span class="line">            <span class="keyword">elif</span> rotateArray[mid] &lt;= rotateArray[p2]:</span><br><span class="line">                p2 = mid</span><br><span class="line">        <span class="keyword">return</span> rotateArray[mid]<span class="comment">#最终p2会停留在mid上,写作rotateArray[p2]也没有区别，这里整段代码都统一返回mid索引值</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minInOrder</span><span class="params">(self, nums, index1, index2)</span>:</span><span class="comment">#确定首尾，遍历一段数组，得到最小值</span></span><br><span class="line"><span class="comment">#         n1 = nums[index]#原博主写法</span></span><br><span class="line">        n1 = nums[index1]<span class="comment">#应改为</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(index1 + <span class="number">1</span>, index2):</span><br><span class="line">            <span class="keyword">if</span> n1 &gt; nums[i]:</span><br><span class="line">                <span class="keyword">return</span> nums[i]</span><br><span class="line">        <span class="keyword">return</span> n1</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># rotateArray = [ 0, 1, 1, 1]</span></span><br><span class="line"><span class="comment"># rotateArray = [ 1, 0, 1,  1, 1]</span></span><br><span class="line"><span class="comment"># rotateArray = [ 1, 1, 1, 0, 1]</span></span><br><span class="line">rotateArray = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">method = Solution4()</span><br><span class="line">method.minNumberInRotateArray(rotateArray)</span><br></pre></td></tr></table></figure><pre><code>1</code></pre><p>参考：</p><p><a href="https://blog.csdn.net/Datawhale/article/details/82143776" target="_blank" rel="noopener">https://blog.csdn.net/Datawhale/article/details/82143776</a></p><p><a href="https://blog.csdn.net/fuxuemingzhu/article/details/79501202" target="_blank" rel="noopener">https://blog.csdn.net/fuxuemingzhu/article/details/79501202</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目：&lt;a href=&quot;https://www.nowcoder.com/ta/coding-interviews&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.nowcoder.com/ta/coding-interviews&lt;/
      
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="剑指offer" scheme="http://yoursite.com/tags/%E5%89%91%E6%8C%87offer/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>有关ubuntu的琐碎小事儿</title>
    <link href="http://yoursite.com/2020/01/09/%E6%9C%89%E5%85%B3ubuntu%E7%9A%84%E7%90%90%E7%A2%8E%E5%B0%8F%E4%BA%8B%E5%84%BF/"/>
    <id>http://yoursite.com/2020/01/09/%E6%9C%89%E5%85%B3ubuntu%E7%9A%84%E7%90%90%E7%A2%8E%E5%B0%8F%E4%BA%8B%E5%84%BF/</id>
    <published>2020-01-09T13:51:38.325Z</published>
    <updated>2019-08-06T12:36:10.895Z</updated>
    
    <content type="html"><![CDATA[<p>1.安装电子书阅读器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install fbreader</span><br></pre></td></tr></table></figure><p>2.安装谷歌访问助手</p><p>​    a.百度下载<strong>谷歌访问助手 .crx **文件，将其重命名为</strong>.zip<strong>文件，然后解压；<br>​    b.打开，将其中</strong>_metadata<strong>文件重命名为</strong>metadata**；<br>​    c.chrome浏览器打开拓展程序界面开发者模式，加载已解压文件夹，done.<br>3.Ubuntu中python版本切换</p><p>​    a.ubuntu中将python3设置为默认，执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo update-alternatives --install /usr/bin/python python /usr/bin/python2 100</span><br><span class="line">sudo update-alternatives --install /usr/bin/python python /usr/bin/python3 150</span><br></pre></td></tr></table></figure><p>​    b.ubuntu中将python2设置为默认，执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-alternatives --config python</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.安装电子书阅读器：&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;c
      
    
    </summary>
    
    
      <category term="教程" scheme="http://yoursite.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Ubuntu" scheme="http://yoursite.com/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>面试题10：变态跳台阶</title>
    <link href="http://yoursite.com/2020/01/09/%E9%9D%A2%E8%AF%95%E9%A2%9810%EF%BC%9A%E5%8F%98%E6%80%81%E8%B7%B3%E5%8F%B0%E9%98%B6/"/>
    <id>http://yoursite.com/2020/01/09/%E9%9D%A2%E8%AF%95%E9%A2%9810%EF%BC%9A%E5%8F%98%E6%80%81%E8%B7%B3%E5%8F%B0%E9%98%B6/</id>
    <published>2020-01-09T13:51:38.325Z</published>
    <updated>2019-09-01T14:05:13.134Z</updated>
    
    <content type="html"><![CDATA[<p>题目：<a href="https://www.nowcoder.com/ta/coding-interviews?page=1" target="_blank" rel="noopener">https://www.nowcoder.com/ta/coding-interviews?page=1</a></p><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</p><p>理解：</p><p>跟之前的分析有相似的地方，假设跳n级台阶有F(n)种方式，那么可能的情况有，先跳1级、或者先跳2级、或者先跳4级、…、或者先跳n-1级、或者直接跳到n级.</p><p>相应的：先跳1级后有F(n-1)种，先跳2级后有F(n-2)种，…，跳n-1级有F(1)种，值得注意的是<strong>直接跳到n级台阶为1种</strong></p><p>于是：F(n)=F(n-1)+F(n-2)+F(n-3)+…+F(3)+F(2)+F(1)+1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution1</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">jumpFloorII</span><span class="params">(self, number)</span>:</span></span><br><span class="line">        a = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">if</span> number &lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">elif</span> number == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> number == <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, number):<span class="comment">#i仅仅代表需要操作的次数</span></span><br><span class="line">                ai = <span class="number">1</span> + sum(a)</span><br><span class="line">                a.append(ai)</span><br><span class="line">            <span class="keyword">return</span> a[number<span class="number">-1</span>]<span class="comment">#索引值（从0开始）比实际台阶数小1</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">method = Solution1()</span><br><span class="line">answer = method.jumpFloorII(<span class="number">5</span>)</span><br><span class="line">answer</span><br></pre></td></tr></table></figure><pre><code>16</code></pre><p>根据递推公式：$F(n)=2^{(n-1)}$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution2</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">jumpFloorII</span><span class="params">(self, number)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> number &lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>**(number<span class="number">-1</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">method = Solution2()</span><br><span class="line">answer = method.jumpFloorII(<span class="number">5</span>)</span><br><span class="line">answer</span><br></pre></td></tr></table></figure><pre><code>16</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目：&lt;a href=&quot;https://www.nowcoder.com/ta/coding-interviews?page=1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.nowcoder.com/ta/coding-inter
      
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="剑指offer" scheme="http://yoursite.com/tags/%E5%89%91%E6%8C%87offer/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>搭建Hexo博客并部署到Github</title>
    <link href="http://yoursite.com/2020/01/09/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2%E5%B9%B6%E9%83%A8%E7%BD%B2Github/"/>
    <id>http://yoursite.com/2020/01/09/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2%E5%B9%B6%E9%83%A8%E7%BD%B2Github/</id>
    <published>2020-01-09T13:51:38.309Z</published>
    <updated>2020-01-09T09:11:11.412Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" />这是zongpu搭建个人博客的过程记录<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>windows, Git, Node</p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><ol><li>利用 npm 命令即可安装。在任意位置点击鼠标右键，选择<strong>Git Bash Here</strong>。 </li></ol><h3 id=""><a href="#" class="headerlink" title=""></a><img src="C:%5CUsers%5CZhou%5CAppData%5CLocal%5CTemp%5C1532748753997.png" alt="1532748753997"></h3><ol start="2"><li>输入命令：<strong>npm install -g hexo</strong></li></ol><p>注意：-g是指全局安装hexo。</p><h2 id="创建Hexo文件夹"><a href="#创建Hexo文件夹" class="headerlink" title="创建Hexo文件夹"></a>创建Hexo文件夹</h2><p>安装完成后，在你喜爱的文件夹下（如C:\Hexo），执行以下指令(在C:\Hexo内点击鼠标右键，选择Git Bash)，Hexo 即会自动在目标文件夹建立网站所需要的所有文件。</p><p><strong>hexo init</strong></p><h2 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h2><p><strong>npm install</strong> </p><h2 id="本地查看Hexo博客"><a href="#本地查看Hexo博客" class="headerlink" title="本地查看Hexo博客"></a>本地查看Hexo博客</h2><p>现在我们已经搭建起本地的hexo博客了，执行以下命令(在C:\Hexo)，然后到浏览器输入localhost:4000看看。</p><p><strong>hexo generate</strong></p><p><strong>hexo server</strong></p><p><strong>注：因为4000端口占用的原因，我在这里并不能打开本地博客</strong></p><h3 id="切换端口以解决"><a href="#切换端口以解决" class="headerlink" title="切换端口以解决"></a>切换端口以解决</h3><p>在Hexo文件夹下的_config.yml文件内增加端口服务设置（以切换到5000为例）</p><p><img src="C:%5CUsers%5CZhou%5CAppData%5CLocal%5CTemp%5C1532749382655.png" alt="1532749382655"></p><p>#Server </p><p>​    server:</p><p>​         port: 4000 </p><p>​        compress: true </p><p>​        header: true</p><p>运行如图：</p><p><img src="C:%5CUsers%5CZhou%5CAppData%5CLocal%5CTemp%5C1532749483662.png" alt="1532749483662"></p><h2 id="Github创建仓库"><a href="#Github创建仓库" class="headerlink" title="Github创建仓库"></a>Github创建仓库</h2><p>创建的时候注意Repository的名字。比如我的Github账号是zongpu，那么我应该创建的Repository的名字是：<strong>zongpu.github.io</strong>这是特别的约定。</p><ol><li><p>到你刚刚创建的Repository下，找到以下内容：</p><p><img src="C:%5CUsers%5CZhou%5CAppData%5CLocal%5CTemp%5C1532753368540.png" alt="1532753368540"></p></li><li><p>在仓库里找到HTTPS，复制里面的地址。</p><p><img src="C:%5CUsers%5CZhou%5CAppData%5CLocal%5CTemp%5C1532753657790.png" alt="1532753657790"></p><p>然后编辑_config.yml文件（在C:\Hexo下），修改增加内容如下(修改时，冒号后面需要空格)：</p><p>deploy:<br>   type: git<br>   repository: <a href="https://github.com/zongpu/zongpu.github.io.git" target="_blank" rel="noopener">https://github.com/zongpu/zongpu.github.io.git</a><br>   branch: master</p><p>并保存。</p><h2 id="设置SSHKEYs"><a href="#设置SSHKEYs" class="headerlink" title="设置SSHKEYs"></a>设置SSHKEYs</h2><ol><li>在Git Bash输入以下指令（任意位置点击鼠标右键），检查是否已经存在了SSH keys。</li></ol><p><strong>ls -al ~/.ssh</strong></p><ol start="2"><li>如果不存在就没有关系，如果存在的话，直接删除.ssh文件夹里面所有文件：</li></ol><p><img src="C:%5CUsers%5CZhou%5CAppData%5CLocal%5CTemp%5C1532753868572.png" alt="1532753868572"> </p><ol start="3"><li>输入以下指令（邮箱就是你注册Github时候的邮箱）后，回车：</li></ol><p><strong>ssh-keygen -t rsa -C “<a href="mailto:xxx@example.com">xxx@example.com</a>“</strong></p><p>经过几次回车会看到方框状的 key’s randomart image </p><p><img src="C:%5CUsers%5CZhou%5CAppData%5CLocal%5CTemp%5C1532754456771.png" alt="1532754456771"></p><p>其中，会提示要你输入passphrase（如上图，我没有输入直接回车，如果你输入的话，要记得，到时候会用到）。之后，如果出现类似下图： </p><p><img src="C:%5CUsers%5CZhou%5CAppData%5CLocal%5CTemp%5C1532754478256.png" alt="1532754478256">        </p><ol start="4"><li><p>然后键入以下指令：</p><p><strong>ssh-agent -s</strong></p><p><img src="C:%5CUsers%5CZhou%5CAppData%5CLocal%5CTemp%5C1532754539611.png" alt="1532754539611"></p></li><li><p>继续输入指令：</p><p><strong>ssh-add ~/.ssh/id_rsa</strong></p><p>输入之后，在我这里是出错了，不知道你的有没有出错。 </p><p><img src="C:%5CUsers%5CZhou%5CAppData%5CLocal%5CTemp%5C1532754867970.png" alt="1532754867970"></p><p>如果你的也是这样子出错了的话，就输入以下指令：（由于编辑格式的原因，这里是：’ssh-agent -s‘，有单引号）</p><p><strong>eval <code>ssh-agent -s</code></strong></p><p><strong>ssh-add</strong></p><p><img src="C:%5CUsers%5CZhou%5CAppData%5CLocal%5CTemp%5C1532755069532.png" alt="1532755069532">6. 到了这一步，就可以添加SSH key到你的Github账户了。键入以下指令，拷贝Key（先拷贝了，等一下可以直接粘贴）：</p><p><strong>clip &lt; ~/.ssh/id_rsa.pub</strong></p><p>注：这里也可以在.ssh文件夹里找到id_rsa.pub文件并复制里面的内容。</p></li></ol></li></ol><pre><code>7. 然后到Github里面，找到设置：![1532755228554](C:\Users\Zhou\AppData\Local\Temp\1532755228554.png) </code></pre><p><img src="C:%5CUsers%5CZhou%5CAppData%5CLocal%5CTemp%5C1532755270340.png" alt="1532755270340"></p><p>添加新的SSH keys</p><p><img src="C:%5CUsers%5CZhou%5CAppData%5CLocal%5CTemp%5C1532755318894.png" alt="1532755318894"></p><p>这里title可作为一个key的说明，key值，刚才已经用命令行复制，可直接粘贴，保存，添加。</p><ol start="8"><li><p>最后还是测试一下吧，键入以下命令：</p><p><strong>ssh -T <a href="mailto:git@github.com">git@github.com</a></strong></p></li><li><p>你可能会看到有警告，没事，输入“yes”就好。</p><p><img src="C:%5CUsers%5CZhou%5CAppData%5CLocal%5CTemp%5C1532755632343.png" alt="1532755632343"> </p><h2 id="完成部署"><a href="#完成部署" class="headerlink" title="完成部署"></a>完成部署</h2><ol><li><p>最后一步，快要成功了，键入指令：</p><p><strong>hexo generate</strong></p><p><strong>hexo deploy</strong></p></li><li><p>OK，我们的博客就已经完全搭建起来了，在浏览器输入（当然，是你的用户名）：</p><p><a href="http://xxx.github.io/" target="_blank" rel="noopener">http://xxx.github.io/</a></p><p>当然：理想是饱满的，在这里又出现了错误</p><p><img src="C:%5CUsers%5CZhou%5CAppData%5CLocal%5CTemp%5C1532770927731.png" alt="1532770927731"></p><p>a. 经搜索错误Error: fatal: HttpRequestException encountered. 了解到，是Github 禁用了TLS v1.0 and v1.1，必须更新Windows的git凭证管理器 ：GCMW（下载链接：<a href="https://github.com/Microsoft/Git-Credential-Manager-for-Windows/releases/tag/v1.14.0）" target="_blank" rel="noopener">https://github.com/Microsoft/Git-Credential-Manager-for-Windows/releases/tag/v1.14.0）</a></p><p>出处：<a href="https://blog.csdn.net/txy864/article/details/79557729" target="_blank" rel="noopener">https://blog.csdn.net/txy864/article/details/79557729</a></p><p>b. 或者键入：</p><p><strong>git config –global credential.helper manager</strong>  </p><p>重新发布，也能正常push：<a href="https://blog.csdn.net/u010229836/article/details/78229339" target="_blank" rel="noopener">https://blog.csdn.net/u010229836/article/details/78229339</a></p></li></ol></li></ol><ol start="3"><li><p>注意：每次修改本地文件后，需要键入hexo generate才能保存。每次使用命令时，都要在C:\Hexo目录下。每次想要上传文件到Github时，就应该先键入hexo generate保存之后，再键入hexo deploy。大概成功之后是酱紫的： </p><p><img src="C:%5CUsers%5CZhou%5CAppData%5CLocal%5CTemp%5C1532771214907.png" alt="1532771214907"></p><p>对了，记住上图的Username是你的Github账号名称，而不是邮箱；Password就是你的Github的密码。 </p><h2 id="博客主题修改"><a href="#博客主题修改" class="headerlink" title="博客主题修改"></a>博客主题修改</h2><p>官方主题地址为<a href="https://hexo.io/themes/" target="_blank" rel="noopener">hexo-themes</a> </p><p>命令格式：git clone <a href="https://github.com/litten/hexo-theme-yilia.git" target="_blank" rel="noopener">https://github.com/litten/hexo-theme-yilia.git</a> themes/yilia </p></li></ol><pre><code>![1532771944857](C:\Users\Zhou\AppData\Local\Temp\1532771944857.png)## 一个问题：Hexo的版本控制与持续集成参见博客：https://formulahendry.github.io/2016/12/04/hexo-ci/最后，以上内容部分截图、陈述来自互联网，实在是做的时候自己没留意截图，在此致谢！主要参考了如下博客，自己也留作参考：1. https://lishion.github.io/2018/06/07/%E4%BD%BF%E7%94%A8git+hexo%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/2. https://jingyan.baidu.com/article/d8072ac47aca0fec95cefd2d.html3. https://www.jianshu.com/p/189fd945f38f4. https://blog.csdn.net/loveyouluobin/article/details/800371085. https://www.jianshu.com/p/1537f3fffe636. https://www.jianshu.com/p/8681ab76da087. https://blog.csdn.net/ainuser/article/details/776091808. https://www.jianshu.com/p/189fd945f38f</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt;
这是zongpu搭建个人博客的过程记录

&lt;h2 id=&quot;工具&quot;&gt;&lt;a href=&quot;#工具&quot; class=&quot;headerlink&quot; title=&quot;工具&quot;&gt;&lt;/a&gt;工具&lt;/h2&gt;&lt;p&gt;wi
      
    
    </summary>
    
    
      <category term="教程" scheme="http://yoursite.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>修改jupyter notebook默认工作路径</title>
    <link href="http://yoursite.com/2020/01/09/%E4%BF%AE%E6%94%B9jupyter-notebook%E9%BB%98%E8%AE%A4%E5%B7%A5%E4%BD%9C%E8%B7%AF%E5%BE%84/"/>
    <id>http://yoursite.com/2020/01/09/%E4%BF%AE%E6%94%B9jupyter-notebook%E9%BB%98%E8%AE%A4%E5%B7%A5%E4%BD%9C%E8%B7%AF%E5%BE%84/</id>
    <published>2020-01-09T13:51:38.293Z</published>
    <updated>2019-08-06T12:26:19.757Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-生成配置文件"><a href="#1-生成配置文件" class="headerlink" title="1.生成配置文件"></a>1.生成配置文件</h1><p>在工作虚拟环境下执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter-notebook --generate-config</span><br></pre></td></tr></table></figure><h1 id="2-在配置文件中修改-设置默认路径"><a href="#2-在配置文件中修改-设置默认路径" class="headerlink" title="2.在配置文件中修改/设置默认路径"></a>2.在配置文件中修改/设置默认路径</h1><p><strong>打开配置文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code ~/.jupyter/jupyter_notebook_config.py</span><br></pre></td></tr></table></figure><p><strong>搜索找到以下字段</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">c.NotebookApp.notebook_dir = <span class="string">''</span></span></span><br></pre></td></tr></table></figure><p>取消注释并在‘’中填入想要的工作路径，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c.NotebookApp.notebook_dir = /home/zongpu/AnacondaProjects</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-生成配置文件&quot;&gt;&lt;a href=&quot;#1-生成配置文件&quot; class=&quot;headerlink&quot; title=&quot;1.生成配置文件&quot;&gt;&lt;/a&gt;1.生成配置文件&lt;/h1&gt;&lt;p&gt;在工作虚拟环境下执行：&lt;/p&gt;
&lt;figure class=&quot;highlight shell
      
    
    </summary>
    
    
      <category term="教程" scheme="http://yoursite.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="jupyter notebook" scheme="http://yoursite.com/tags/jupyter-notebook/"/>
    
  </entry>
  
  <entry>
    <title>初次提交项目到Github</title>
    <link href="http://yoursite.com/2020/01/09/%E5%88%9D%E6%AC%A1%E6%8F%90%E4%BA%A4%E9%A1%B9%E7%9B%AE%E5%88%B0Github/"/>
    <id>http://yoursite.com/2020/01/09/%E5%88%9D%E6%AC%A1%E6%8F%90%E4%BA%A4%E9%A1%B9%E7%9B%AE%E5%88%B0Github/</id>
    <published>2020-01-09T13:51:38.293Z</published>
    <updated>2018-11-01T10:26:48.661Z</updated>
    
    <content type="html"><![CDATA[<p>这是初次使用github提交项目的几个简单操作记录（忽略仓库建立过程）</p><h2 id="初次提交项目到仓库"><a href="#初次提交项目到仓库" class="headerlink" title="初次提交项目到仓库"></a>初次提交项目到仓库</h2><p>1.在项目文件所在路径下右键唤出<strong>git bash</strong></p><p>2.执行<strong>git init</strong> ，在当前项目的目录中生成本地的git管理（会发现在当前目录下多了一个.git文件夹）；</p><p>3.输入<strong>git add .</strong>  （<strong>空格点</strong>表示将所有的文件添加到仓库中 ），不然，则将<strong>“.”</strong>换成<strong>要提交的文件名</strong>即可；</p><p>4.执行<strong>git commit -m “first commit”</strong>，表示你对这次提交的注释，双引号里面的内容可以根据提交的情况修改；</p><p>5.在次执行<strong>git commit -m “first commit”</strong>时就会成功 （我忘记是否有这步），提交时试试即可，不影响；</p><p>6.执行<strong>git remote add origin https://自己的仓库url地址</strong> （打开要提交到的github仓库即可寻到）关联仓库；</p><p>7.执行<strong>git push -u origin master</strong>命令即可提交到仓库；</p><p><em>另外：在本地git没有关联到github账号时上述步骤中有需要输入github账号、密码的情况。</em></p><p><em>参考博客：<a href="https://blog.csdn.net/m0_37725003/article/details/80904824" target="_blank" rel="noopener">https://blog.csdn.net/m0_37725003/article/details/80904824</a></em></p><h2 id="更新本地项目后提交到github"><a href="#更新本地项目后提交到github" class="headerlink" title="更新本地项目后提交到github"></a>更新本地项目后提交到github</h2><p>1.查看当前的git仓库状态，可以使用<strong>git status</strong></p><p>2.更新<strong>git add</strong> (项目文件或者用“.”表示路径下的全部)</p><p>3.接着执行<strong>git commit -m “更新说明”</strong></p><p>4.执行<strong>git pull</strong>拉取当前分支更新情况</p><p>5.执行<strong>git push origin master</strong> push到远程master分支上</p><p><em>参考博客：<a href="https://www.cnblogs.com/zlxbky/p/7727895.html" target="_blank" rel="noopener">https://www.cnblogs.com/zlxbky/p/7727895.html</a></em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这是初次使用github提交项目的几个简单操作记录（忽略仓库建立过程）&lt;/p&gt;
&lt;h2 id=&quot;初次提交项目到仓库&quot;&gt;&lt;a href=&quot;#初次提交项目到仓库&quot; class=&quot;headerlink&quot; title=&quot;初次提交项目到仓库&quot;&gt;&lt;/a&gt;初次提交项目到仓库&lt;/h2&gt;&lt;p
      
    
    </summary>
    
    
      <category term="教程" scheme="http://yoursite.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Github" scheme="http://yoursite.com/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu18.04深度学习GPU环境配置</title>
    <link href="http://yoursite.com/2020/01/09/Ubuntu18.04%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0GPU%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2020/01/09/Ubuntu18.04%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0GPU%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</id>
    <published>2020-01-09T13:51:38.278Z</published>
    <updated>2019-06-21T08:58:27.979Z</updated>
    
    <content type="html"><![CDATA[<p><strong>主要环节</strong>：Ubuntu18.04（已安装好）、CUDA安装、cuDNN安装、Anaconda设置虚拟环境安装TF等<br><strong>背景</strong>：在经过过漫长的小论文准备实验和写作后，终于将稿子交与导师审校，想来也有时间可以学习盼望已久的东西了。在经历一整天反复折腾后，结合几篇博客对每一步进行稍作记录，作为备忘的同时也许可以帮到其他萌新。</p><h1 id="1-版本选择"><a href="#1-版本选择" class="headerlink" title="1 版本选择"></a>1 版本选择</h1><p>CUDA10.0+cuDNN7.5.0 for CUDA10.0</p><p>官网：</p><p>cuda：<a href="https://developer.nvidia.com/cuda-10.0-download-archive?target_os=Linux&amp;target_arch=x86_64&amp;target_distro=Ubuntu&amp;target_version=1804&amp;target_type=runfilelocal" target="_blank" rel="noopener">https://developer.nvidia.com/cuda-10.0-download-archive?target_os=Linux&amp;target_arch=x86_64&amp;target_distro=Ubuntu&amp;target_version=1804&amp;target_type=runfilelocal</a></p><p>cudnn（需要先注册账户）：<a href="https://developer.nvidia.com/rdp/cudnn-download" target="_blank" rel="noopener">https://developer.nvidia.com/rdp/cudnn-download</a></p><h1 id="2-安装显卡NVIDIA显卡驱动"><a href="#2-安装显卡NVIDIA显卡驱动" class="headerlink" title="2 安装显卡NVIDIA显卡驱动"></a>2 安装显卡NVIDIA显卡驱动</h1><p>这里本来以前我通过在官网下载run文件安装过，但是稍显麻烦也忘了具体流程，于是参考别人的做法用了ppa源的安装方式</p><h2 id="2-1-卸载原有驱动"><a href="#2-1-卸载原有驱动" class="headerlink" title="2.1 卸载原有驱动"></a>2.1 卸载原有驱动</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 删除</span><br><span class="line">sudo apt-get purge nvidia*</span><br></pre></td></tr></table></figure><h2 id="2-2-禁止自带驱动"><a href="#2-2-禁止自带驱动" class="headerlink" title="2.2 禁止自带驱动"></a>2.2 禁止自带驱动</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 打开配置文件</span><br><span class="line">sudo vim &#x2F;etc&#x2F;modprobe.d&#x2F;blacklist-nouveau.conf</span><br></pre></td></tr></table></figure><p>将以下字段添加到文件末尾</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">blacklist nouveau</span><br><span class="line">options nouveau modeset&#x3D;0</span><br></pre></td></tr></table></figure><p>更新文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-initramfs -u</span><br></pre></td></tr></table></figure><p>这里可能需要重启电脑</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 重启</span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure><h2 id="2-3-添加Graphic-Drivers-PPA"><a href="#2-3-添加Graphic-Drivers-PPA" class="headerlink" title="2.3 添加Graphic Drivers PPA"></a>2.3 添加Graphic Drivers PPA</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:graphics-drivers&#x2F;ppa</span><br><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><p>查看合适的驱动版本以安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ubuntu-drivers devices</span><br></pre></td></tr></table></figure><p>如图：</p><p><img src="/home/zongpu/%E5%9B%BE%E7%89%87/drevers.png" alt="drevers"></p><p>我选择推荐的418版本安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 安装</span><br><span class="line">sudo apt-get install nvidia-driver-396</span><br><span class="line"># 重启</span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure><p>安装成功后会显示显卡信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo nvidia-smi</span><br><span class="line">sudo nvidia-settings</span><br></pre></td></tr></table></figure><p><img src="/home/zongpu/%E5%9B%BE%E7%89%87/GPU.png" alt="GPU"></p><p><img src="/home/zongpu/%E5%9B%BE%E7%89%87/gpusetting.png" alt="gpusetting"></p><p>以上便安装好了显卡驱动。</p><h1 id="3-安装CUDA"><a href="#3-安装CUDA" class="headerlink" title="3 安装CUDA"></a>3 安装CUDA</h1><h2 id="3-1-下载CUDA10-0"><a href="#3-1-下载CUDA10-0" class="headerlink" title="3.1 下载CUDA10.0"></a>3.1 下载CUDA10.0</h2><p><img src="/home/zongpu/%E5%9B%BE%E7%89%87/cuda.png" alt="cuda"></p><p>以上是我的选择情况。</p><h2 id="3-2-安装依赖关系"><a href="#3-2-安装依赖关系" class="headerlink" title="3.2 安装依赖关系"></a>3.2 安装依赖关系</h2><p>参考：<a href="https://www.cnblogs.com/Ph-one/p/9000211.html" target="_blank" rel="noopener">https://www.cnblogs.com/Ph-one/p/9000211.html</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install freeglut3-dev build-essential libx11-dev libxmu-dev libxi-dev libgl1-mesa-glx libglu1-mesa libglu1-mesa-dev</span><br></pre></td></tr></table></figure><h2 id="3-3-降低GCC版本"><a href="#3-3-降低GCC版本" class="headerlink" title="3.3 降低GCC版本"></a>3.3 降低GCC版本</h2><p>根据诸多博客的经验，还需要先降低GCC版本，先查看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#查看版本信息</span><br><span class="line">gcc --version</span><br><span class="line">#或者</span><br><span class="line">g++ --version</span><br></pre></td></tr></table></figure><p>安装低GCC版本（多数博客均是该版本）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gcc-5 g++-5</span><br><span class="line"><span class="meta">#</span><span class="bash">或者</span></span><br><span class="line">sudo apt-get install gcc-5</span><br><span class="line">sudo apt-get install g++-5</span><br></pre></td></tr></table></figure><p>根据提示开始安装低版本</p><p>然后替换：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 50   # you will find that message that tells you the gcc-5 is set to be automatic.</span><br><span class="line">sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-5 50   # similiar message as gcc</span><br></pre></td></tr></table></figure><p>值得一提的是文章<a href="https://blog.csdn.net/sinat_40276791/article/details/80403784中提到说：**安装cuda的时候并没有降级gcc，g++；说明cuda9.0已经支持gcc7.0安装，所谓降级是后面要编译cuda测试例子的时候用到6.0以下的g++，和gcc版本。**但是我的gcc版本较高，为保险，我还是先降低。" target="_blank" rel="noopener">https://blog.csdn.net/sinat_40276791/article/details/80403784中提到说：**安装cuda的时候并没有降级gcc，g++；说明cuda9.0已经支持gcc7.0安装，所谓降级是后面要编译cuda测试例子的时候用到6.0以下的g++，和gcc版本。**但是我的gcc版本较高，为保险，我还是先降低。</a></p><h2 id="3-4-开始安装CUDA"><a href="#3-4-开始安装CUDA" class="headerlink" title="3.4 开始安装CUDA"></a>3.4 开始安装CUDA</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sh cuda_10.0.130_410.48_linux.run</span><br></pre></td></tr></table></figure><p><strong>ctrl+c 可快速结束阅读文档</strong>接下来根据提示选择就好了，</p><p>值得一提的是，<strong>在安装过程中会提示是否需要安装显卡驱动，这里要选择n，因为我们已经提前安装了驱动</strong>，提前安装驱动也是几乎所有博主的选择，我并没有单独尝试不提前安装的情况。其他的选择y或者回车键进行安装即可。</p><h2 id="3-5设置环境变量："><a href="#3-5设置环境变量：" class="headerlink" title="3.5设置环境变量："></a>3.5设置环境变量：</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit ~/.bashrc</span><br></pre></td></tr></table></figure><p>在打开的文本中添加下列内容，根据版本进行改动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export PATH=/usr/local/cuda-10.0/bin$&#123;PATH:+:$&#123;PATH&#125;&#125;  </span><br><span class="line">export LD_LIBRARY_PATH=/usr/local/cuda-10.0/lib64$&#123;LD_LIBRARY_PATH:+:$&#123;LD_LIBRARY_PATH&#125;&#125;</span><br></pre></td></tr></table></figure><p>更新：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><p>也许需要重启</p><h2 id="3-6-测试是否成功"><a href="#3-6-测试是否成功" class="headerlink" title="3.6 测试是否成功"></a>3.6 测试是否成功</h2><p>验证CUDA10.0是否安装成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 第一步，进入例子文件</span></span><br><span class="line">cd /usr/local/cuda-10.0/samples/1_Utilities/deviceQuery</span><br><span class="line"><span class="meta">#</span><span class="bash"> 第二步，执行make命令</span></span><br><span class="line">sudo make</span><br><span class="line"><span class="meta">#</span><span class="bash"> 第三步</span></span><br><span class="line">./deviceQuery</span><br></pre></td></tr></table></figure><p>输出结果有GPU的信息，以及显示Result = PASS等，说明CUDA安装成功。</p><h1 id="4-安装cuDNN"><a href="#4-安装cuDNN" class="headerlink" title="4 安装cuDNN"></a>4 安装cuDNN</h1><h2 id="4-1-cuDNN下载"><a href="#4-1-cuDNN下载" class="headerlink" title="4.1 cuDNN下载"></a>4.1 cuDNN下载</h2><p><img src="/home/zongpu/%E5%9B%BE%E7%89%87/cudnn.png" alt="udnn"></p><p>下载对应的Deb文件，这里对应Ubnuntu18.04共有三项，都要下载。</p><h2 id="4-2-安装"><a href="#4-2-安装" class="headerlink" title="4.2 安装"></a>4.2 安装</h2><p>注意：这里有的博客直接下载了cuDNN Library for Linux项，安装方式有所不同（这在官网也有安装说明），如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">1.Navigate to your &lt;cudnnpath&gt; directory containing the cuDNN Tar file.</span></span><br><span class="line"><span class="meta">#</span><span class="bash">2.Unzip the cuDNN package.</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar -xzvf cudnn-9.0-linux-x64-v7.tgz</span></span><br><span class="line"><span class="meta">#</span><span class="bash">3.Copy the following files into the CUDA Toolkit directory, and change the file permissions.</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo cp cuda/include/cudnn.h /usr/<span class="built_in">local</span>/cuda/include</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo cp cuda/lib64/libcudnn* /usr/<span class="built_in">local</span>/cuda/lib64</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo chmod a+r /usr/<span class="built_in">local</span>/cuda/include/cudnn.h </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo chmod a+r /usr/<span class="built_in">local</span>/cuda/lib64/libcudnn*</span></span><br></pre></td></tr></table></figure><p>官网安装说明：<a href="https://docs.nvidia.com/deeplearning/sdk/cudnn-install/index.html#installlinux" target="_blank" rel="noopener">https://docs.nvidia.com/deeplearning/sdk/cudnn-install/index.html#installlinux</a></p><p>之前已经下载好了文件(对应的三项)，我现在直接安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i libcudnn7_7.5.0.56-1+cuda10.0_amd64.deb</span><br><span class="line">sudo dpkg -i libcudnn7-dev_7.5.0.56-1+cuda10.0_amd64.deb</span><br><span class="line">sudo dpkg -i libcudnn7-doc_7.5.0.56-1+cuda10.0_amd64.deb</span><br></pre></td></tr></table></figure><h2 id="4-3-测试"><a href="#4-3-测试" class="headerlink" title="4.3 测试"></a>4.3 测试</h2><p>执行以上命令后，测试是否安装好：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cp -r &#x2F;usr&#x2F;src&#x2F;cudnn_samples_v7&#x2F; $HOME</span><br><span class="line">cd $HOME&#x2F;cudnn_samples_v7&#x2F;mnistCUDNN</span><br><span class="line">make clean &amp;&amp; make</span><br><span class="line">.&#x2F;mnistCUDNN</span><br></pre></td></tr></table></figure><p>最终显示Test passed!则安装成功</p><p>版本查看</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvcc -V</span><br></pre></td></tr></table></figure><p>以上是cuDNN的安装。</p><h1 id="5-安装Anaconda"><a href="#5-安装Anaconda" class="headerlink" title="5 安装Anaconda"></a>5 安装Anaconda</h1><h2 id="5-1-安装anaconda"><a href="#5-1-安装anaconda" class="headerlink" title="5.1 安装anaconda"></a>5.1 安装anaconda</h2><p>Anaconda的优点有口皆碑，安装也十分方便，根据不同版本选择修改即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash Anaconda3-5.3.0-Linux-x86_64.sh</span><br></pre></td></tr></table></figure><h2 id="5-2-更改pip和conda为国内的源"><a href="#5-2-更改pip和conda为国内的源" class="headerlink" title="5.2 更改pip和conda为国内的源"></a>5.2 更改pip和conda为国内的源</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~&#x2F;.pip</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; ~&#x2F;.pip&#x2F;pip.conf &lt;&lt; EOF</span><br><span class="line">[global]</span><br><span class="line">trusted-host&#x3D;mirrors.aliyun.com</span><br><span class="line">index-url&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple&#x2F;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;free&#x2F;</span><br><span class="line">conda config --set show_channel_urls yes</span><br></pre></td></tr></table></figure><h2 id="5-3-为TF准备虚拟环境"><a href="#5-3-为TF准备虚拟环境" class="headerlink" title="5.3 为TF准备虚拟环境"></a>5.3 为TF准备虚拟环境</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda create --name tensorflow python=3.6 </span><br><span class="line"><span class="meta">#</span><span class="bash">创建tf环境，这里我的虚拟环境名字叫tensorflow，根据喜好替换即可</span></span><br></pre></td></tr></table></figure><p>一些常用命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">source activate tensorflow            #激活环境</span><br><span class="line">#或者conda  activate tensorflow        #激活环境</span><br><span class="line">source deactivate tensorflow          #退出环境</span><br><span class="line">#conda deactivate tensorflow          #退出环境</span><br><span class="line">conda remove --name tensorflow --all  #删除tensorflow环境（全部删除）</span><br></pre></td></tr></table></figure><h2 id="5-4-安装Tensorflow"><a href="#5-4-安装Tensorflow" class="headerlink" title="5.4 安装Tensorflow"></a>5.4 安装Tensorflow</h2><p>进入虚拟环境后再进行安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">conda  activate tensorflow</span><br><span class="line"># 安装 gpu 版本的 tensorflow 和 keras</span><br><span class="line">conda install tensorflow-gpu # 默认安装最新版本</span><br><span class="line">conda install keras</span><br></pre></td></tr></table></figure><p>命令将会自动安装相关组件，如：numpy 、wheel 、tensorflow-tensorboard 、six、protobuf 、html5lib 、markdown、werkzeug 、bleach、setuptools等。</p><h2 id="5-6-测试"><a href="#5-6-测试" class="headerlink" title="5.6 测试"></a>5.6 测试</h2><p>进入虚拟环境，找到python：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">source activate tf</span><br><span class="line">python</span><br></pre></td></tr></table></figure><p>在Python命令下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line">hello&#x3D; tf.constant(&#39;Hello, TensorFlow!&#39;)</span><br><span class="line">sess&#x3D; tf.Session()</span><br><span class="line">print(sess.run(hello))</span><br></pre></td></tr></table></figure><p>如果没有报错则安装成功。</p><h2 id="5-7-其他框架："><a href="#5-7-其他框架：" class="headerlink" title="5.7 其他框架："></a>5.7 其他框架：</h2><p>同样在我们设置的虚拟环境内：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">安装Keras</span></span><br><span class="line">conda install keras</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">安装Pytorch</span></span><br><span class="line">conda install pytorch torchvision -c pytorch</span><br><span class="line"><span class="meta">#</span><span class="bash">测试</span></span><br><span class="line">source activate tf</span><br><span class="line">python</span><br><span class="line">import torch</span><br><span class="line">print(torch.cuda.is_available())</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>anaconda安装详细过程：<a href="https://blog.csdn.net/u012318074/article/details/77074665" target="_blank" rel="noopener">https://blog.csdn.net/u012318074/article/details/77074665</a></p><p>机器学习初学者文章（Ubuntu 18.04深度学习环境配置（CUDA9.0+CUDDN7.4+TensorFolw1.8））：</p><p><a href="https://mp.weixin.qq.com/s?__biz=Mzg5NzAxMDgwNg==&amp;mid=2247483901&amp;idx=1&amp;sn=f02bd7866ad172ef0c9669851dffde2a&amp;chksm=c0791ce4f70e95f2343047e62d513c0106eedebc09cc25d1c45598ede21da8655a974c6a69c5&amp;mpshare=1&amp;scene=1&amp;srcid=04179jALGhka70U7n9ovBuKY&amp;pass_ticket=KprLcHSq%2F%2FifAFYAESWtIOC2CUJ3iHrXGxrel4jNTybt4taMs41OkZkLKgYztL0x#rd" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=Mzg5NzAxMDgwNg==&amp;mid=2247483901&amp;idx=1&amp;sn=f02bd7866ad172ef0c9669851dffde2a&amp;chksm=c0791ce4f70e95f2343047e62d513c0106eedebc09cc25d1c45598ede21da8655a974c6a69c5&amp;mpshare=1&amp;scene=1&amp;srcid=04179jALGhka70U7n9ovBuKY&amp;pass_ticket=KprLcHSq%2F%2FifAFYAESWtIOC2CUJ3iHrXGxrel4jNTybt4taMs41OkZkLKgYztL0x#rd</a></p><p>Ubuntu18.04深度学习GPU环境配置：<a href="https://blog.csdn.net/weixin_41863685/article/details/80303963" target="_blank" rel="noopener">https://blog.csdn.net/weixin_41863685/article/details/80303963</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;主要环节&lt;/strong&gt;：Ubuntu18.04（已安装好）、CUDA安装、cuDNN安装、Anaconda设置虚拟环境安装TF等&lt;br&gt;&lt;strong&gt;背景&lt;/strong&gt;：在经过过漫长的小论文准备实验和写作后，终于将稿子交与导师审校，想来也有时间可以
      
    
    </summary>
    
    
      <category term="教程" scheme="http://yoursite.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Tensorflow" scheme="http://yoursite.com/tags/Tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2020/01/09/hello-world/"/>
    <id>http://yoursite.com/2020/01/09/hello-world/</id>
    <published>2020-01-09T13:51:38.278Z</published>
    <updated>2018-07-28T02:41:47.129Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
